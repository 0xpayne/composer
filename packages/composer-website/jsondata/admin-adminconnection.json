{"name":"AdminConnection","commentData":{"description":"This class creates an administration connection to a Hyperledger Composer runtime. The\nconnection can then be used to:\n\n\n- Deploy BusinessNetworkDefinitions\n- Undeploy BusinessNetworkDefinitions\n- Update BusinessNetworkDefinitions\n- Send a ping message to the runtime to ensure it is running and correctly configured.\n- Store a connection profile document in the connection profile store\n\n\nNote: that the methods on this class take the 'businessNetworkIdentifier'; this has to match\nthe name given on the create call. An AdminConnection that has been connected to network-A can\nonly be used to adminster network-A.\n\nInstances of AdminConnections can be reused for different networks. Call `disconnect(..)` then `connect(..)`.\nCalling an api after disconnect and before connect will give an error.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-admin"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":["Object","BusinessNetworkCardStore"],"decorators":["param","param"],"throws":"","example":"","commentData":{"description":"Create an instance of the AdminConnection class.\n\nThe default cardstore is a filesystem based one that stores files in `~/.composer`","tags":[{"title":"param","description":"an optional set of options to configure the instance.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options"},{"title":"param","description":"specify a card store implementation to use.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"BusinessNetworkCardStore"}},"name":"options.cardStore"}]},"description":["Create an instance of the AdminConnection class.","The default cardstore is a filesystem based one that stores files in `~/.composer`"],"parameters":[{"description":"an optional set of options to configure the instance.","type":"Object","name":"options","optional":true}],"suboptions":[{"description":"specify a card store implementation to use.","type":"BusinessNetworkCardStore","name":"options.cardStore","optional":true}],"seeAlso":[],"summary":"Create an instance of the AdminConnection class"},{"visibility":"+","returnType":"Promise","name":"importCard","methodArgs":["String","IdCard"],"decorators":["param","param","return"],"throws":"","example":"","commentData":{"description":"Import a business network card. If a card of this name exists, it is replaced.","tags":[{"title":"param","description":"Name by which this card should be referred","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"param","description":"The card to import","type":{"type":"NameExpression","name":"IdCard"},"name":"card"},{"title":"return","description":"Resolved when the card is imported, resolves to true if updated, false if added.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Import a business network card. If a card of this name exists, it is replaced."],"parameters":[{"description":"Name by which this card should be referred","type":"String","name":"name","optional":false},{"description":"The card to import","type":"IdCard","name":"card","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["Resolved when the card is imported, resolves to true if updated, false if added."],"type":"Promise"},"summary":"Import a business network card"},{"visibility":"+","returnType":"Promise","name":"exportCard","methodArgs":["String"],"decorators":["param","return"],"throws":"","example":"","commentData":{"description":"Exports an network card.\nShould the card not actually contain the certificates in the card, a exportIdentity will be\nperformed to get the details of the cards","tags":[{"title":"param","description":"The name of the card that needs to be exported","type":{"type":"NameExpression","name":"String"},"name":"cardName"},{"title":"return","description":"resolved with an instance of the network id card populated","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Exports an network card. Should the card not actually contain the certificates in the card, a exportIdentity will be performed to get the details of the cards"],"parameters":[{"description":"The name of the card that needs to be exported","type":"String","name":"cardName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["resolved with an instance of the network id card populated"],"type":"Promise"},"summary":"Exports an network card"},{"visibility":"+","returnType":"Promise","name":"getAllCards","methodArgs":[],"decorators":["return"],"throws":"","example":"","commentData":{"description":"List all Business Network cards.","tags":[{"title":"return","description":"resolved with a  Map of idcard objects keyed by their  String names.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["List all Business Network cards."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["resolved with a  Map of idcard objects keyed by their  String names."],"type":"Promise"},"summary":"List all Business Network cards"},{"visibility":"+","returnType":"Promise","name":"deleteCard","methodArgs":["String"],"decorators":["param","returns"],"throws":"","example":"","commentData":{"description":"Delete an existing card.","tags":[{"title":"param","description":"Name of the card to delete.","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"returns","description":"Resolves true if deleted, false if not deleted, is rejected if an error occurs.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Delete an existing card."],"parameters":[{"description":"Name of the card to delete.","type":"String","name":"name","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["Resolves true if deleted, false if not deleted, is rejected if an error occurs."],"type":"Promise"},"summary":"Delete an existing card"},{"visibility":"+","returnType":"Promise","name":"hasCard","methodArgs":["String"],"decorators":["param","returns"],"throws":"","example":"","commentData":{"description":"Has a existing card.","tags":[{"title":"param","description":"Name of the card to check.","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"returns","description":"Resolves with true if the card with the name exists, resolved with false if not","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Has a existing card."],"parameters":[{"description":"Name of the card to check.","type":"String","name":"name","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["Resolves with true if the card with the name exists, resolved with false if not"],"type":"Promise"},"summary":"Has a existing card"},{"visibility":"+","returnType":"Promise","name":"connect","methodArgs":["String"],"decorators":["example","param","return"],"throws":"","example":"// Connect to Hyperledger Fabric\nlet adminConnection = new AdminConnection();\ntry {\n  await adminConnection.connect('userCard@network')\n  // Connected.\n} catch(error){\n    // Add optional error handling here.\n}","commentData":{"description":"Connects and logs in to the Hyperledger Fabric using a named connection\nprofile.\n\nThe connection profile must exist in the profile store.","tags":[{"title":"example","description":"// Connect to Hyperledger Fabric\nlet adminConnection = new AdminConnection();\ntry {\n  await adminConnection.connect('userCard@network')\n  // Connected.\n} catch(error){\n    // Add optional error handling here.\n}"},{"title":"param","description":"The name of the business network card","type":{"type":"NameExpression","name":"String"},"name":"cardName"},{"title":"return","description":"A promise that when resolved indicates the connection is complete","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Connects and logs in to the Hyperledger Fabric using a named connection profile.","The connection profile must exist in the profile store."],"parameters":[{"description":"The name of the business network card","type":"String","name":"cardName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that when resolved indicates the connection is complete"],"type":"Promise"},"summary":"Connects and logs in to the Hyperledger Fabric using a named connection profile"},{"visibility":"+","returnType":"Promise","name":"disconnect","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// Disconnect from a Business Network\nlet adminConnection = new AdminConnection();\ntry {\n  await adminConnection.connect('userCard@network')\n  // Connected\n  await adminConnection.disconnect()\n  // and now disconnected.\n} catch(error){\n    // Add optional error handling here.\n}","commentData":{"description":"Disconnects this connection.securityContext","tags":[{"title":"example","description":"// Disconnect from a Business Network\nlet adminConnection = new AdminConnection();\ntry {\n  await adminConnection.connect('userCard@network')\n  // Connected\n  await adminConnection.disconnect()\n  // and now disconnected.\n} catch(error){\n    // Add optional error handling here.\n}"},{"title":"return","description":"A promise that will be resolved when the connection is\nterminated.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Disconnects this connection.securityContext"],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be resolved when the connection is terminated."],"type":"Promise"},"summary":"Disconnects this connection"},{"visibility":"+","returnType":"Promise","name":"install","methodArgs":["String","Object"],"decorators":["example","param","param","return"],"throws":"","example":"// Install the Hyperledger Composer runtime\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n   await adminConnection.connect('adminCard@hlfv1')\n   await adminConnection.install(businessNetworkDefinition.getName());\n    // Business network definition installed\n} catch(error){\n    // Add optional error handling here.\n}","commentData":{"description":"Installs the Hyperledger Composer runtime to the Hyperledger Fabric in preparation\nfor the business network to be started. The connection must be connected for this method to succeed.\nYou must pass the name of the business network that is defined in your archive that this\nruntime will be started with.","tags":[{"title":"example","description":"// Install the Hyperledger Composer runtime\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n   await adminConnection.connect('adminCard@hlfv1')\n   await adminConnection.install(businessNetworkDefinition.getName());\n    // Business network definition installed\n} catch(error){\n    // Add optional error handling here.\n}"},{"title":"param","description":"The name of business network which will be used to start this runtime.","type":{"type":"NameExpression","name":"String"},"name":"businessNetworkName"},{"title":"param","description":"connector specific install options","type":{"type":"NameExpression","name":"Object"},"name":"installOptions"},{"title":"return","description":"A promise that will be fufilled when the business network has been\ndeployed.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Installs the Hyperledger Composer runtime to the Hyperledger Fabric in preparation for the business network to be started. The connection must be connected for this method to succeed. You must pass the name of the business network that is defined in your archive that this runtime will be started with."],"parameters":[{"description":"The name of business network which will be used to start this runtime.","type":"String","name":"businessNetworkName","optional":false},{"description":"connector specific install options","type":"Object","name":"installOptions","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be fufilled when the business network has been deployed."],"type":"Promise"},"summary":"Installs the Hyperledger Composer runtime to the Hyperledger Fabric in preparation for the business network to be started"},{"visibility":"+","returnType":"Promise","name":"start","methodArgs":["BusinessNetworkDefinition","Object"],"decorators":["example","param","param","return"],"throws":"","example":"// Start a Business Network Definition\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n    await adminConnection.connect('userCard@network')\n    await adminConnection.start(businessNetworkDefinition,\n             { networkAdmins:\n                 [ {userName : 'admin', enrollmentSecret:'adminpw'} ]\n             }\n\n    // Business network definition is started\n} catch(error){\n    // Add optional error handling here.\n}","commentData":{"description":"Starts a business network within the runtime previously installed to the Hyperledger Fabric with\nthe same name as the business network to be started. The connection must be connected for this\nmethod to succeed.","tags":[{"title":"example","description":"// Start a Business Network Definition\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n    await adminConnection.connect('userCard@network')\n    await adminConnection.start(businessNetworkDefinition,\n             { networkAdmins:\n                 [ {userName : 'admin', enrollmentSecret:'adminpw'} ]\n             }\n\n    // Business network definition is started\n} catch(error){\n    // Add optional error handling here.\n}"},{"title":"param","description":"The business network to start","type":{"type":"NameExpression","name":"BusinessNetworkDefinition"},"name":"businessNetworkDefinition"},{"title":"param","description":"connector specific start options\n                 networkAdmins:   [ { userName, certificate } , { userName, enrollmentSecret  }]","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"startOptions"},{"title":"return","description":"A promise that will be fufilled when the business network has been\ndeployed - with a MAP of cards key is name","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Starts a business network within the runtime previously installed to the Hyperledger Fabric with the same name as the business network to be started. The connection must be connected for this method to succeed."],"parameters":[{"description":"The business network to start","type":"BusinessNetworkDefinition","name":"businessNetworkDefinition","optional":false},{"description":"connector specific start options                  networkAdmins:   [ { userName, certificate } , { userName, enrollmentSecret  }]","type":"Object","name":"startOptions","optional":true}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be fufilled when the business network has been deployed - with a MAP of cards key is name"],"type":"Promise"},"summary":"Starts a business network within the runtime previously installed to the Hyperledger Fabric with the same name as the business network to be started"},{"visibility":"+","returnType":"Promise","name":"deploy","methodArgs":["BusinessNetworkDefinition","Object"],"decorators":["example","param","param","return","deprecated"],"throws":"","example":"// Deploy a Business Network Definition\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.deploy(businessNetworkDefinition)\n   // Business network definition deployed\n} catch(error) {\n    // Add error handling here.\n}","commentData":{"description":"Deploys a new BusinessNetworkDefinition to the Hyperledger Fabric. The connection must\nbe connected for this method to succeed.","tags":[{"title":"example","description":"// Deploy a Business Network Definition\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.deploy(businessNetworkDefinition)\n   // Business network definition deployed\n} catch(error) {\n    // Add error handling here.\n}"},{"title":"param","description":"The business network to deploy","type":{"type":"NameExpression","name":"BusinessNetworkDefinition"},"name":"businessNetworkDefinition"},{"title":"param","description":"connector specific deployment options\n               deployOptions.card the card to use for the NetworkAdmin","type":{"type":"NameExpression","name":"Object"},"name":"deployOptions"},{"title":"return","description":"A promise that will be fufilled when the business network has been\ndeployed.","type":{"type":"NameExpression","name":"Promise"}},{"title":"deprecated","description":"Please install() and start()"}]},"description":["Deploys a new BusinessNetworkDefinition to the Hyperledger Fabric. The connection must be connected for this method to succeed."],"parameters":[{"description":"The business network to deploy","type":"BusinessNetworkDefinition","name":"businessNetworkDefinition","optional":false},{"description":"connector specific deployment options                deployOptions.card the card to use for the NetworkAdmin","type":"Object","name":"deployOptions","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be fufilled when the business network has been deployed."],"type":"Promise"},"summary":"Deploys a new BusinessNetworkDefinition to the Hyperledger Fabric"},{"visibility":"+","returnType":"Promise","name":"undeploy","methodArgs":["String"],"decorators":["example","param","return"],"throws":"","example":"// Undeploy a Business Network Definition\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.undeploy('network-name')\n   // Undeployed Business Network Definition\n} catch(error){\n    // Add error handling here.\n}","commentData":{"description":"Undeploys a BusinessNetworkDefinition from the Hyperledger Fabric. The business network will no\nlonger be able to process transactions.","tags":[{"title":"example","description":"// Undeploy a Business Network Definition\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.undeploy('network-name')\n   // Undeployed Business Network Definition\n} catch(error){\n    // Add error handling here.\n}"},{"title":"param","description":"The name of business network that will be used to start this runtime.","type":{"type":"NameExpression","name":"String"},"name":"businessNetworkName"},{"title":"return","description":"A promise that will be fufilled when the business network has been\nundeployed.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Undeploys a BusinessNetworkDefinition from the Hyperledger Fabric. The business network will no longer be able to process transactions."],"parameters":[{"description":"The name of business network that will be used to start this runtime.","type":"String","name":"businessNetworkName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be fufilled when the business network has been undeployed."],"type":"Promise"},"summary":"Undeploys a BusinessNetworkDefinition from the Hyperledger Fabric"},{"visibility":"+","returnType":"Promise","name":"update","methodArgs":["BusinessNetworkDefinition"],"decorators":["example","param","return"],"throws":"","example":"// Updates a Business Network Definition\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.update(businessNetworkDefinition)\n   // Business network definition updated\n} catch(error){\n    // Add optional error handling here.\n}","commentData":{"description":"Updates an existing BusinessNetworkDefinition on the Hyperledger Fabric. The BusinessNetworkDefinition\nmust have been previously deployed.","tags":[{"title":"example","description":"// Updates a Business Network Definition\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.update(businessNetworkDefinition)\n   // Business network definition updated\n} catch(error){\n    // Add optional error handling here.\n}"},{"title":"param","description":"The new BusinessNetworkDefinition","type":{"type":"NameExpression","name":"BusinessNetworkDefinition"},"name":"businessNetworkDefinition"},{"title":"return","description":"A promise that will be fufilled when the business network has been\nupdated.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Updates an existing BusinessNetworkDefinition on the Hyperledger Fabric. The BusinessNetworkDefinition must have been previously deployed."],"parameters":[{"description":"The new BusinessNetworkDefinition","type":"BusinessNetworkDefinition","name":"businessNetworkDefinition","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be fufilled when the business network has been updated."],"type":"Promise"},"summary":"Updates an existing BusinessNetworkDefinition on the Hyperledger Fabric"},{"visibility":"+","returnType":"Promise","name":"reset","methodArgs":["String"],"decorators":["example","param","return"],"throws":"","example":"// Resets a Business Network Definition\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.reset('network-name')\n   // Business network data removed\n} catch(error){\n    // Add error handling here.\n}","commentData":{"description":"Resets an existing BusinessNetworkDefinition on the Hyperledger Fabric. The BusinessNetworkDefinition\nmust have been previously deployed.\n\nNote this will remove ALL the contents of the network registries, but not any system registries","tags":[{"title":"example","description":"// Resets a Business Network Definition\nlet adminConnection = new AdminConnection();\nlet businessNetworkDefinition = BusinessNetworkDefinition.fromArchive(myArchive);\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.reset('network-name')\n   // Business network data removed\n} catch(error){\n    // Add error handling here.\n}"},{"title":"param","description":"The name of business network that will be reset","type":{"type":"NameExpression","name":"String"},"name":"businessNetworkName"},{"title":"return","description":"A promise that will be fufilled when the business network has been\nupdated.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Resets an existing BusinessNetworkDefinition on the Hyperledger Fabric. The BusinessNetworkDefinition must have been previously deployed.","Note this will remove ALL the contents of the network registries, but not any system registries"],"parameters":[{"description":"The name of business network that will be reset","type":"String","name":"businessNetworkName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be fufilled when the business network has been updated."],"type":"Promise"},"summary":"Resets an existing BusinessNetworkDefinition on the Hyperledger Fabric"},{"visibility":"+","returnType":"Promise","name":"upgrade","methodArgs":["string","object"],"decorators":["param","param","return","example","memberof"],"throws":"","example":"// Upgrade the Hyperledger Composer runtime\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('adminCard@hlfv1')\n   await adminConnection.upgrade('digitalproperty-network');\n\n   // Business network definition upgraded\n} catch(error) => {\n   // Add error handling here.\n}","commentData":{"description":"Upgrades an existing business network's composer runtime to a later level.\nThe connection must be connected specifying the business network identifier as part of the\nconnection for this method to succeed.","tags":[{"title":"param","description":"The name of the business network","type":{"type":"NameExpression","name":"string"},"name":"businessNetworkName"},{"title":"param","description":"connector specific options","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"object"}},"name":"upgradeOptions"},{"title":"return","description":"A promise that will be fufilled when the composer runtime has been upgraded,\nor rejected otherwise.","type":{"type":"NameExpression","name":"Promise"}},{"title":"example","description":"// Upgrade the Hyperledger Composer runtime\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('adminCard@hlfv1')\n   await adminConnection.upgrade('digitalproperty-network');\n\n   // Business network definition upgraded\n} catch(error) => {\n   // Add error handling here.\n}"},{"title":"memberof","description":"AdminConnection"}]},"description":["Upgrades an existing business network's composer runtime to a later level. The connection must be connected specifying the business network identifier as part of the connection for this method to succeed."],"parameters":[{"description":"The name of the business network","type":"string","name":"businessNetworkName","optional":false},{"description":"connector specific options","type":"object","name":"upgradeOptions","optional":true}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be fufilled when the composer runtime has been upgraded, or rejected otherwise."],"type":"Promise"},"summary":"Upgrades an existing business network's composer runtime to a later level"},{"visibility":"+","returnType":"Promise","name":"ping","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// Test the connection to the runtime\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network');\n   await adminConnection.ping();\n    // Connection has been tested\n} catch(error){\n    // Add error handling here.\n}","commentData":{"description":"Test the connection to the runtime and verify that the version of the\nruntime is compatible with this level of the node.js module.","tags":[{"title":"example","description":"// Test the connection to the runtime\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network');\n   await adminConnection.ping();\n    // Connection has been tested\n} catch(error){\n    // Add error handling here.\n}"},{"title":"return","description":"A promise that will be fufilled when the connection has\nbeen tested. The promise will be rejected if the version is incompatible.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Test the connection to the runtime and verify that the version of the runtime is compatible with this level of the node.js module."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be fufilled when the connection has been tested. The promise will be rejected if the version is incompatible."],"type":"Promise"},"summary":"Test the connection to the runtime and verify that the version of the runtime is compatible with this level of the node"},{"visibility":"+","returnType":"Promise","name":"setLogLevel","methodArgs":["any"],"decorators":["example","param","returns","memberof"],"throws":"","example":"// Set the logging level of a business network.\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.setLogLevel('DEBUG')\n   console.log('log level set to DEBUG');\n} catch(error){\n    // Add error handling here.\n}","commentData":{"description":"Set the logging level of a business network. The connection must\nbe connected for this method to succeed.","tags":[{"title":"example","description":"// Set the logging level of a business network.\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network')\n   await adminConnection.setLogLevel('DEBUG')\n   console.log('log level set to DEBUG');\n} catch(error){\n    // Add error handling here.\n}"},{"title":"param","description":"new logging level","type":{"type":"NameExpression","name":"any"},"name":"newLogLevel"},{"title":"returns","description":"A promise that resolves if successful.","type":{"type":"NameExpression","name":"Promise"}},{"title":"memberof","description":"AdminConnection"}]},"description":["Set the logging level of a business network. The connection must be connected for this method to succeed."],"parameters":[{"description":"new logging level","type":"any","name":"newLogLevel","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that resolves if successful."],"type":"Promise"},"summary":"Set the logging level of a business network"},{"visibility":"+","returnType":"Promise","name":"getLogLevel","methodArgs":[],"decorators":["example","returns","memberof"],"throws":"","example":"// Get the current logging level of a business network.\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network');\n   let currentLogLevel = await adminConnection.getLogLevel();\n    console.log('current log level is ' + currentLogLevel);\n} catch(error){\n    // Add error handling here.\n}","commentData":{"description":"Get the current logging level of a business network. The connection must\nbe connected for this method to succeed.","tags":[{"title":"example","description":"// Get the current logging level of a business network.\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network');\n   let currentLogLevel = await adminConnection.getLogLevel();\n    console.log('current log level is ' + currentLogLevel);\n} catch(error){\n    // Add error handling here.\n}"},{"title":"returns","description":"A promise that resolves with the current logging level if successful.","type":{"type":"NameExpression","name":"Promise"}},{"title":"memberof","description":"AdminConnection"}]},"description":["Get the current logging level of a business network. The connection must be connected for this method to succeed."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that resolves with the current logging level if successful."],"type":"Promise"},"summary":"Get the current logging level of a business network"},{"visibility":"+","returnType":"Promise","name":"list","methodArgs":[],"decorators":["example","return"],"throws":"","example":"// List all of the deployed business networks.\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network');\n   let businessNetworks = await adminConnection.list();\n   businessNetworks.forEach((businessNetwork) => {\n      console.log('Deployed business network', businessNetwork);\n   });\n} catch(error){\n    // Add error handling here.\n}","commentData":{"description":"List all of the deployed business networks. The connection must\nbe connected for this method to succeed.","tags":[{"title":"example","description":"// List all of the deployed business networks.\nlet adminConnection = new AdminConnection();\ntry {\n   await adminConnection.connect('userCard@network');\n   let businessNetworks = await adminConnection.list();\n   businessNetworks.forEach((businessNetwork) => {\n      console.log('Deployed business network', businessNetwork);\n   });\n} catch(error){\n    // Add error handling here.\n}"},{"title":"return","description":"A promise that will be resolved with an array of\nbusiness network identifiers, or rejected with an error.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["List all of the deployed business networks. The connection must be connected for this method to succeed."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be resolved with an array of business network identifiers, or rejected with an error."],"type":"Promise"},"summary":"List all of the deployed business networks"}],"description":["This class creates an administration connection to a Hyperledger Composer runtime. The connection can then be used to:","- Deploy BusinessNetworkDefinitions - Undeploy BusinessNetworkDefinitions - Update BusinessNetworkDefinitions - Send a ping message to the runtime to ensure it is running and correctly configured. - Store a connection profile document in the connection profile store","Note: that the methods on this class take the 'businessNetworkIdentifier'; this has to match the name given on the create call. An AdminConnection that has been connected to network-A can only be used to adminster network-A.","Instances of AdminConnections can be reused for different networks. Call `disconnect(..)` then `connect(..)`. Calling an api after disconnect and before connect will give an error."],"seeAlso":[],"visibility":"public","module":"admin","summary":"This class creates an administration connection to a Hyperledger Composer runtime"}