{"name":"BusinessNetworkCardStore","commentData":{"description":"Manages persistence of business network cards.\nApplications would not work with this abstract class directly, but with one of the subclass\n{@link FileSystemCardStore} or {@link MemoryCardStore}.  The File system card store is the default for\nboth Admin and Business Network Connections","tags":[{"title":"abstract","description":null},{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"String","name":"getDefaultCardName","methodArgs":["IdCard"],"decorators":["param","returns"],"throws":"","example":"","commentData":{"description":"Get a default name for a given business network card.","tags":[{"title":"param","description":"A business network card","type":{"type":"NameExpression","name":"IdCard"},"name":"card"},{"title":"returns","description":"A card name","type":{"type":"NameExpression","name":"String"}}]},"description":["Get a default name for a given business network card."],"parameters":[{"description":"A business network card","type":"IdCard","name":"card","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A card name"],"type":"String"},"summary":"Get a default name for a given business network card"},{"visibility":"+","returnType":"Promise","name":"get","methodArgs":["String"],"decorators":["abstract","param","return"],"throws":"","example":"","commentData":{"description":"Gets a card from the store.","tags":[{"title":"abstract","description":null},{"title":"param","description":"The name of the card to get","type":{"type":"NameExpression","name":"String"},"name":"cardName"},{"title":"return","description":"A promise that is resolved with an IdCard, or rejected if the card does not exist.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Gets a card from the store."],"parameters":[{"description":"The name of the card to get","type":"String","name":"cardName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that is resolved with an IdCard, or rejected if the card does not exist."],"type":"Promise"},"summary":"Gets a card from the store"},{"visibility":"+","returnType":"Promise","name":"put","methodArgs":["String","IdCard"],"decorators":["abstract","param","param","return"],"throws":"","example":"","commentData":{"description":"Puts a card in the store. If the named card already exists in the store, it will be replaced.","tags":[{"title":"abstract","description":null},{"title":"param","description":"The name of the card to save","type":{"type":"NameExpression","name":"String"},"name":"cardName"},{"title":"param","description":"The card","type":{"type":"NameExpression","name":"IdCard"},"name":"card"},{"title":"return","description":"A promise that resolves once the data is written","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Puts a card in the store. If the named card already exists in the store, it will be replaced."],"parameters":[{"description":"The name of the card to save","type":"String","name":"cardName","optional":false},{"description":"The card","type":"IdCard","name":"card","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that resolves once the data is written"],"type":"Promise"},"summary":"Puts a card in the store"},{"visibility":"+","returnType":"Promise","name":"has","methodArgs":["String"],"decorators":["abstract","param","return"],"throws":"","example":"","commentData":{"description":"Has returns a boolean indicating whether a card with the specified name exists or not.","tags":[{"title":"abstract","description":null},{"title":"param","description":"The name of the card to check","type":{"type":"NameExpression","name":"String"},"name":"cardName"},{"title":"return","description":"A promise resolved with true or false.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Has returns a boolean indicating whether a card with the specified name exists or not."],"parameters":[{"description":"The name of the card to check","type":"String","name":"cardName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise resolved with true or false."],"type":"Promise"},"summary":"Has returns a boolean indicating whether a card with the specified name exists or not"},{"visibility":"+","returnType":"Promise","name":"getAll","methodArgs":[],"decorators":["abstract","return"],"throws":"","example":"","commentData":{"description":"Gets all cards from the store.","tags":[{"title":"abstract","description":null},{"title":"return","description":"A promise that is resolved with a Map where\nthe keys are identity card names and the values are IdCard objects.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Gets all cards from the store."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that is resolved with a Map where the keys are identity card names and the values are IdCard objects."],"type":"Promise"},"summary":"Gets all cards from the store"},{"visibility":"+","returnType":"Promise","name":"delete","methodArgs":["String"],"decorators":["abstract","param","return"],"throws":"","example":"","commentData":{"description":"Delete a specific card from the store.","tags":[{"title":"abstract","description":null},{"title":"param","description":"The name of the card to delete.","type":{"type":"NameExpression","name":"String"},"name":"cardName"},{"title":"return","description":"A promise that resolves to true if the card existed; otherwise false.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Delete a specific card from the store."],"parameters":[{"description":"The name of the card to delete.","type":"String","name":"cardName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that resolves to true if the card existed; otherwise false."],"type":"Promise"},"summary":"Delete a specific card from the store"}],"description":["Manages persistence of business network cards. Applications would not work with this abstract class directly, but with one of the subclass {@link FileSystemCardStore} or {@link MemoryCardStore}.  The File system card store is the default for both Admin and Business Network Connections"],"seeAlso":[],"visibility":"public","module":"common","summary":"Manages persistence of business network cards"}