{"name":"MemoryCardStore","commentData":{"description":"Transient in-memory storage of business network cards, useful for testing.\nTo use this in preference to the default File System Card Store","tags":[{"title":"example","description":"const AdminConnection = require(\"composer-admin\").AdminConnection;\nconst MemoryCardStore = require('composer-common').MemoryCardStore;\n\nlet cardStore = new MemoryCardStore();\nlet adminConnection = new AdminConnection({cardStore});"},{"title":"class","description":null,"type":null,"name":null},{"title":"extends","description":null,"type":null,"name":"BusinessNetworkCardStore"},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"constructor","methodArgs":[],"decorators":[],"throws":"","example":"","commentData":{"description":"Constructor.","tags":[]},"description":["Constructor."],"parameters":[],"suboptions":[],"seeAlso":[],"summary":"Constructor"},{"visibility":"+","returnType":"void","name":"get","methodArgs":[],"decorators":["inheritdoc"],"throws":"","example":"","commentData":{"description":"","tags":[{"title":"inheritdoc","description":null}]},"description":["Gets a card from the store."],"parameters":[{"description":"The name of the card to get","type":"String","name":"cardName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that is resolved with an IdCard, or rejected if the card does not exist."],"type":"Promise"}},{"visibility":"+","returnType":"void","name":"put","methodArgs":[],"decorators":["inheritdoc"],"throws":"","example":"","commentData":{"description":"","tags":[{"title":"inheritdoc","description":null}]},"description":["Puts a card in the store. If the named card already exists in the store, it will be replaced."],"parameters":[{"description":"The name of the card to save","type":"String","name":"cardName","optional":false},{"description":"The card","type":"IdCard","name":"card","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that resolves once the data is written"],"type":"Promise"}},{"visibility":"+","returnType":"void","name":"has","methodArgs":[],"decorators":["inheritdoc"],"throws":"","example":"","commentData":{"description":"","tags":[{"title":"inheritdoc","description":null}]},"description":["Has returns a boolean indicating whether a card with the specified name exists or not."],"parameters":[{"description":"The name of the card to check","type":"String","name":"cardName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise resolved with true or false."],"type":"Promise"}},{"visibility":"+","returnType":"void","name":"getAll","methodArgs":[],"decorators":["inheritdoc"],"throws":"","example":"","commentData":{"description":"","tags":[{"title":"inheritdoc","description":null}]},"description":["Gets all cards from the store."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that is resolved with a Map where the keys are identity card names and the values are IdCard objects."],"type":"Promise"}},{"visibility":"+","returnType":"void","name":"delete","methodArgs":[],"decorators":["inheritdoc"],"throws":"","example":"","commentData":{"description":"","tags":[{"title":"inheritdoc","description":null}]},"description":["Delete a specific card from the store."],"parameters":[{"description":"The name of the card to delete.","type":"String","name":"cardName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that resolves to true if the card existed; otherwise false."],"type":"Promise"}}],"superClass":"BusinessNetworkCardStore","description":["Transient in-memory storage of business network cards, useful for testing. To use this in preference to the default File System Card Store"],"seeAlso":[],"visibility":"public","extends":"BusinessNetworkCardStore","module":"common","summary":"Transient in-memory storage of business network cards, useful for testing","superMethods":[{"fromClass":"BusinessNetworkCardStore","method":{"visibility":"+","returnType":"String","name":"getDefaultCardName","methodArgs":["IdCard"],"decorators":["param","returns"],"throws":"","example":"","commentData":{"description":"Get a default name for a given business network card.","tags":[{"title":"param","description":"A business network card","type":{"type":"NameExpression","name":"IdCard"},"name":"card"},{"title":"returns","description":"A card name","type":{"type":"NameExpression","name":"String"}}]},"description":["Get a default name for a given business network card."],"parameters":[{"description":"A business network card","type":"IdCard","name":"card","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A card name"],"type":"String"},"summary":"Get a default name for a given business network card"}}]}