{"name":"ModelManager","commentData":{"description":"Manages the Composer model files.\n\n\nThe structure of {@link Resource}s (Assets, Transactions, Participants) is modelled\nin a set of Composer files. The contents of these files are managed\nby the {@link ModelManager}. Each Composer file has a single namespace and contains\na set of asset, transaction and participant type definitions.\n\n\nComposer applications load their Composer files and then call the {@link ModelManager#addModelFile addModelFile}\nmethod to register the Composer file(s) with the ModelManager. The ModelManager\nparses the text of the Composer file and will make all defined types available\nto other Composer services, such as the {@link Serializer} (to convert instances to/from JSON)\nand {@link Factory} (to create instances).","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-common"}]},"methods":[{"visibility":"+","returnType":"void","name":"validateModelFile","methodArgs":["string","string"],"decorators":["param","param","throws"],"throws":"IllegalModelException","example":"","commentData":{"description":"Validates a Composer file (as a string) to the ModelManager.\nComposer files have a single namespace.\n\nNote that if there are dependencies between multiple files the files\nmust be added in dependency order, or the addModelFiles method can be\nused to add a set of files irrespective of dependencies.","tags":[{"title":"param","description":"The Composer file as a string","type":{"type":"NameExpression","name":"string"},"name":"modelFile"},{"title":"param","description":"an optional file name to associate with the model file","type":{"type":"NameExpression","name":"string"},"name":"fileName"},{"title":"throws","description":null,"type":{"type":"NameExpression","name":"IllegalModelException"}}]},"description":["Validates a Composer file (as a string) to the ModelManager. Composer files have a single namespace.","Note that if there are dependencies between multiple files the files must be added in dependency order, or the addModelFiles method can be used to add a set of files irrespective of dependencies."],"parameters":[{"description":"The Composer file as a string","type":"string","name":"modelFile","optional":false},{"description":"an optional file name to associate with the model file","type":"string","name":"fileName","optional":false}],"suboptions":[],"seeAlso":[],"summary":"Validates a Composer file (as a string) to the ModelManager"},{"visibility":"+","returnType":"Object","name":"addModelFile","methodArgs":["string","string"],"decorators":["param","param","throws","return"],"throws":"IllegalModelException","example":"","commentData":{"description":"Adds a Composer file (as a string) to the ModelManager.\nComposer files have a single namespace. If a Composer file with the\nsame namespace has already been added to the ModelManager then it\nwill be replaced.\nNote that if there are dependencies between multiple files the files\nmust be added in dependency order, or the addModelFiles method can be\nused to add a set of files irrespective of dependencies.","tags":[{"title":"param","description":"The Composer file as a string","type":{"type":"NameExpression","name":"string"},"name":"modelFile"},{"title":"param","description":"an optional file name to associate with the model file","type":{"type":"NameExpression","name":"string"},"name":"fileName"},{"title":"throws","description":null,"type":{"type":"NameExpression","name":"IllegalModelException"}},{"title":"return","description":"The newly added model file (internal).","type":{"type":"NameExpression","name":"Object"}}]},"description":["Adds a Composer file (as a string) to the ModelManager. Composer files have a single namespace. If a Composer file with the same namespace has already been added to the ModelManager then it will be replaced. Note that if there are dependencies between multiple files the files must be added in dependency order, or the addModelFiles method can be used to add a set of files irrespective of dependencies."],"parameters":[{"description":"The Composer file as a string","type":"string","name":"modelFile","optional":false},{"description":"an optional file name to associate with the model file","type":"string","name":"fileName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["The newly added model file (internal)."],"type":"Object"},"summary":"Adds a Composer file (as a string) to the ModelManager"},{"visibility":"+","returnType":"Object","name":"updateModelFile","methodArgs":["string","string"],"decorators":["param","param","throws","returns"],"throws":"IllegalModelException","example":"","commentData":{"description":"Updates a Composer file (as a string) on the ModelManager.\nComposer files have a single namespace. If a Composer file with the\nsame namespace has already been added to the ModelManager then it\nwill be replaced.","tags":[{"title":"param","description":"The Composer file as a string","type":{"type":"NameExpression","name":"string"},"name":"modelFile"},{"title":"param","description":"an optional file name to associate with the model file","type":{"type":"NameExpression","name":"string"},"name":"fileName"},{"title":"throws","description":null,"type":{"type":"NameExpression","name":"IllegalModelException"}},{"title":"returns","description":"The newly added model file (internal).","type":{"type":"NameExpression","name":"Object"}}]},"description":["Updates a Composer file (as a string) on the ModelManager. Composer files have a single namespace. If a Composer file with the same namespace has already been added to the ModelManager then it will be replaced."],"parameters":[{"description":"The Composer file as a string","type":"string","name":"modelFile","optional":false},{"description":"an optional file name to associate with the model file","type":"string","name":"fileName","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["The newly added model file (internal)."],"type":"Object"},"summary":"Updates a Composer file (as a string) on the ModelManager"},{"visibility":"+","returnType":"void","name":"deleteModelFile","methodArgs":["string"],"decorators":["param"],"throws":"","example":"","commentData":{"description":"Remove the Composer file for a given namespace","tags":[{"title":"param","description":"The namespace of the model file to\ndelete.","type":{"type":"NameExpression","name":"string"},"name":"namespace"}]},"description":["Remove the Composer file for a given namespace"],"parameters":[{"description":"The namespace of the model file to delete.","type":"string","name":"namespace","optional":false}],"suboptions":[],"seeAlso":[]},{"visibility":"+","returnType":"Object[]","name":"addModelFiles","methodArgs":["string[]","string[]"],"decorators":["param","param","returns"],"throws":"","example":"","commentData":{"description":"Add a set of Composer files to the model manager.","tags":[{"title":"param","description":"An array of Composer files as\nstrings.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]},"name":"modelFiles"},{"title":"param","description":"An optional array of file names to\nassociate with the model files","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]},"name":"fileNames"},{"title":"returns","description":"The newly added model files (internal).","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}}]},"description":["Add a set of Composer files to the model manager."],"parameters":[{"description":"An array of Composer files as strings.","name":"modelFiles","optional":false},{"description":"An optional array of file names to associate with the model files","name":"fileNames","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["The newly added model files (internal)."],"type":"Object[]"},"summary":"Add a set of Composer files to the model manager"},{"visibility":"+","returnType":"void","name":"clearModelFiles","methodArgs":[],"decorators":[],"throws":"","example":"","commentData":{"description":"Remove all registered Composer files","tags":[]},"description":["Remove all registered Composer files"],"parameters":[],"suboptions":[],"seeAlso":[]},{"visibility":"+","returnType":"string[]","name":"getNamespaces","methodArgs":[],"decorators":["return"],"throws":"","example":"","commentData":{"description":"Get the namespaces registered with the ModelManager.","tags":[{"title":"return","description":"namespaces - the namespaces that have been registered.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]}}]},"description":["Get the namespaces registered with the ModelManager."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["namespaces - the namespaces that have been registered."],"type":"string[]"},"summary":"Get the namespaces registered with the ModelManager"},{"visibility":"+","returnType":"ClassDeclaration[]","name":"getSystemTypes","methodArgs":[],"decorators":["return"],"throws":"","example":"","commentData":{"description":"Get all class declarations from system namespaces","tags":[{"title":"return","description":"the ClassDeclarations from system namespaces","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"ClassDeclaration"}]}}]},"description":["Get all class declarations from system namespaces"],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["the ClassDeclarations from system namespaces"],"type":"ClassDeclaration[]"}},{"visibility":"+","returnType":"AssetDeclaration[]","name":"getAssetDeclarations","methodArgs":["Boolean"],"decorators":["param","return"],"throws":"","example":"","commentData":{"description":"Get the AssetDeclarations defined in this model manager","tags":[{"title":"param","description":"Include the decalarations of system type in returned data","type":{"type":"NameExpression","name":"Boolean"},"name":"includeSystemType"},{"title":"return","description":"the AssetDeclarations defined in the model manager","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"AssetDeclaration"}]}}]},"description":["Get the AssetDeclarations defined in this model manager"],"parameters":[{"description":"Include the decalarations of system type in returned data","type":"Boolean","name":"includeSystemType","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["the AssetDeclarations defined in the model manager"],"type":"AssetDeclaration[]"}},{"visibility":"+","returnType":"TransactionDeclaration[]","name":"getTransactionDeclarations","methodArgs":["Boolean"],"decorators":["param","return"],"throws":"","example":"","commentData":{"description":"Get the TransactionDeclarations defined in this model manager","tags":[{"title":"param","description":"Include the decalarations of system type in returned data","type":{"type":"NameExpression","name":"Boolean"},"name":"includeSystemType"},{"title":"return","description":"the TransactionDeclarations defined in the model manager","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"TransactionDeclaration"}]}}]},"description":["Get the TransactionDeclarations defined in this model manager"],"parameters":[{"description":"Include the decalarations of system type in returned data","type":"Boolean","name":"includeSystemType","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["the TransactionDeclarations defined in the model manager"],"type":"TransactionDeclaration[]"}},{"visibility":"+","returnType":"EventDeclaration[]","name":"getEventDeclarations","methodArgs":["Boolean"],"decorators":["param","return"],"throws":"","example":"","commentData":{"description":"Get the EventDeclarations defined in this model manager","tags":[{"title":"param","description":"Include the decalarations of system type in returned data","type":{"type":"NameExpression","name":"Boolean"},"name":"includeSystemType"},{"title":"return","description":"the EventDeclaration defined in the model manager","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"EventDeclaration"}]}}]},"description":["Get the EventDeclarations defined in this model manager"],"parameters":[{"description":"Include the decalarations of system type in returned data","type":"Boolean","name":"includeSystemType","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["the EventDeclaration defined in the model manager"],"type":"EventDeclaration[]"}},{"visibility":"+","returnType":"ParticipantDeclaration[]","name":"getParticipantDeclarations","methodArgs":["Boolean"],"decorators":["param","return"],"throws":"","example":"","commentData":{"description":"Get the ParticipantDeclarations defined in this model manager","tags":[{"title":"param","description":"Include the decalarations of system type in returned data","type":{"type":"NameExpression","name":"Boolean"},"name":"includeSystemType"},{"title":"return","description":"the ParticipantDeclaration defined in the model manager","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"ParticipantDeclaration"}]}}]},"description":["Get the ParticipantDeclarations defined in this model manager"],"parameters":[{"description":"Include the decalarations of system type in returned data","type":"Boolean","name":"includeSystemType","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["the ParticipantDeclaration defined in the model manager"],"type":"ParticipantDeclaration[]"}},{"visibility":"+","returnType":"EnumDeclaration[]","name":"getEnumDeclarations","methodArgs":["Boolean"],"decorators":["param","return"],"throws":"","example":"","commentData":{"description":"Get the EnumDeclarations defined in this model manager","tags":[{"title":"param","description":"Include the decalarations of system type in returned data","type":{"type":"NameExpression","name":"Boolean"},"name":"includeSystemType"},{"title":"return","description":"the EnumDeclaration defined in the model manager","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"EnumDeclaration"}]}}]},"description":["Get the EnumDeclarations defined in this model manager"],"parameters":[{"description":"Include the decalarations of system type in returned data","type":"Boolean","name":"includeSystemType","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["the EnumDeclaration defined in the model manager"],"type":"EnumDeclaration[]"}},{"visibility":"+","returnType":"ConceptDeclaration[]","name":"getConceptDeclarations","methodArgs":["Boolean"],"decorators":["param","return"],"throws":"","example":"","commentData":{"description":"Get the Concepts defined in this model manager","tags":[{"title":"param","description":"Include the decalarations of system type in returned data","type":{"type":"NameExpression","name":"Boolean"},"name":"includeSystemType"},{"title":"return","description":"the ConceptDeclaration defined in the model manager","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"ConceptDeclaration"}]}}]},"description":["Get the Concepts defined in this model manager"],"parameters":[{"description":"Include the decalarations of system type in returned data","type":"Boolean","name":"includeSystemType","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["the ConceptDeclaration defined in the model manager"],"type":"ConceptDeclaration[]"}}],"description":["Manages the Composer model files.","The structure of {@link Resource}s (Assets, Transactions, Participants) is modelled in a set of Composer files. The contents of these files are managed by the {@link ModelManager}. Each Composer file has a single namespace and contains a set of asset, transaction and participant type definitions.","Composer applications load their Composer files and then call the {@link ModelManager#addModelFile addModelFile} method to register the Composer file(s) with the ModelManager. The ModelManager parses the text of the Composer file and will make all defined types available to other Composer services, such as the {@link Serializer} (to convert instances to/from JSON) and {@link Factory} (to create instances)."],"seeAlso":[],"visibility":"public","module":"common","summary":"Manages the Composer model files"}