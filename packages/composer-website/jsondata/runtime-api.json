{"name":"Api","commentData":{"description":"A class that contains the root of the transaction processor API. Methods in this\nclass are made available as global functions which can be called by transaction\nprocessor functions. The transaction processor API should expose no internal\nproperties or internal methods which could be accessed or misused.","tags":[{"title":"class","description":null,"type":null,"name":null},{"title":"memberof","description":"module:composer-runtime"}]},"methods":[{"visibility":"+","returnType":"module:composer-runtime.Factory","name":"getFactory","parameterTypes":[],"parameterNames":[],"throws":"","decorators":["see","link","example","method","public","return"],"functionText":"function getFactory() {\n            const method = 'getFactory';\n            LOG.entry(method);\n            let result = new Factory(factory);\n            LOG.exit(method, result);\n            return result;\n        }","example":"// Get the factory.\nvar factory = getFactory();","commentData":{"description":"Get the factory. The factory can be used to create new instances of\nassets, participants, and transactions for storing in registries. The\nfactory can also be used for creating relationships to assets, particpants,\nand transactions.","tags":[{"title":"see","description":"{@link module:composer-runtime.Factory}"},{"title":"example","description":"// Get the factory.\nvar factory = getFactory();"},{"title":"method","description":null,"name":"module:composer-runtime#getFactory"},{"title":"public","description":null,"type":null},{"title":"return","description":"The factory.","type":{"type":"NameExpression","name":"module:composer-runtime.Factory"}}]},"description":["Get the factory. The factory can be used to create new instances of assets, participants, and transactions for storing in registries. The factory can also be used for creating relationships to assets, particpants, and transactions."],"parameters":[],"suboptions":[],"seeAlso":["{@link module:composer-runtime.Factory}"],"return":{"description":["The factory."],"type":"module:composer-runtime.Factory"},"summary":"Get the factory"},{"visibility":"+","returnType":"module:composer-common.Serializer","name":"getSerializer","parameterTypes":[],"parameterNames":[],"throws":"","decorators":["example","method","public","return"],"functionText":"function getSerializer() {\n            const method = 'getSerializer';\n            LOG.entry(method);\n            let result = new Serializer(serializer);\n            LOG.exit(method, result);\n            return result;\n        }","example":"// Get the serializer.\nvar ser = getSerializer();","commentData":{"description":"Get the serializer. The serializer can be used to create new instances of\nassets, participants, and transactions from a JavaScript object, or to create\na JavaScript object suitable for long-lived persistence.","tags":[{"title":"example","description":"// Get the serializer.\nvar ser = getSerializer();"},{"title":"method","description":null,"name":"module:composer-runtime#getSerializer"},{"title":"public","description":null,"type":null},{"title":"return","description":"The serializer.","type":{"type":"NameExpression","name":"module:composer-common.Serializer"}}]},"description":["Get the serializer. The serializer can be used to create new instances of assets, participants, and transactions from a JavaScript object, or to create a JavaScript object suitable for long-lived persistence."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["The serializer."],"type":"module:composer-common.Serializer"},"summary":"Get the serializer"},{"visibility":"+","returnType":"Promise","name":"getAssetRegistry","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","method","public","param","return","link"],"functionText":"function getAssetRegistry(id) {\n            const method = 'getAssetRegistry';\n            LOG.entry(method, id);\n            return registryManager.get('Asset', id)\n                .then((registry) => {\n                    let result = new AssetRegistry(registry);\n                    LOG.exit(method, result);\n                    return result;\n                });\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Call methods on the vehicle asset registry.\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get an existing asset registry using the unique identifier of the asset\nregistry. An asset registry can be used to retrieve, update, or delete\nexisting assets, or create new assets.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Call methods on the vehicle asset registry.\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"method","description":null,"name":"module:composer-runtime#getAssetRegistry"},{"title":"public","description":null,"type":null},{"title":"param","description":"The ID of the asset registry.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with an {@link\nmodule:composer-runtime.AssetRegistry AssetRegistry} instance\nrepresenting the asset registry if it exists. If the asset registry\ndoes not exist, or the current user does not have access to the asset\nregistry, then the promise will be rejected with an error that describes\nthe problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get an existing asset registry using the unique identifier of the asset registry. An asset registry can be used to retrieve, update, or delete existing assets, or create new assets."],"parameters":[{"description":"The ID of the asset registry.","type":"string","name":"id","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with an {@link module:composer-runtime.AssetRegistry AssetRegistry} instance representing the asset registry if it exists. If the asset registry does not exist, or the current user does not have access to the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Get an existing asset registry using the unique identifier of the asset registry"},{"visibility":"+","returnType":"Promise","name":"getParticipantRegistry","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","method","public","param","return","link"],"functionText":"function getParticipantRegistry(id) {\n            const method = 'getParticipantRegistry';\n            LOG.entry(method, id);\n            return registryManager.get('Participant', id)\n                .then((registry) => {\n                    let result = new ParticipantRegistry(registry);\n                    LOG.exit(method, result);\n                    return result;\n                });\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (driverParticipantRegistry) {\n    // Call methods on the driver participant registry.\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get an existing participant registry using the unique identifier of the participant\nregistry. An participant registry can be used to retrieve, update, or delete\nexisting participants, or create new participants.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (driverParticipantRegistry) {\n    // Call methods on the driver participant registry.\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"method","description":null,"name":"module:composer-runtime#getParticipantRegistry"},{"title":"public","description":null,"type":null},{"title":"param","description":"The ID of the participant registry.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with an {@link\nmodule:composer-runtime.ParticipantRegistry ParticipantRegistry} instance\nrepresenting the participant registry if it exists. If the participant registry\ndoes not exist, or the current user does not have access to the participant\nregistry, then the promise will be rejected with an error that describes\nthe problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get an existing participant registry using the unique identifier of the participant registry. An participant registry can be used to retrieve, update, or delete existing participants, or create new participants."],"parameters":[{"description":"The ID of the participant registry.","type":"string","name":"id","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with an {@link module:composer-runtime.ParticipantRegistry ParticipantRegistry} instance representing the participant registry if it exists. If the participant registry does not exist, or the current user does not have access to the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Get an existing participant registry using the unique identifier of the participant registry"},{"visibility":"+","returnType":"module:composer-common.Resource","name":"getCurrentParticipant","parameterTypes":[],"parameterNames":[],"throws":"","decorators":["example","method","public","return"],"functionText":"function getCurrentParticipant() {\n            const method = 'getCurrentParticipant';\n            LOG.entry(method);\n            let result = participant;\n            LOG.exit(method, result);\n            return result;\n        }","example":"// Get the current participant.\nvar currentParticipant = getCurrentParticipant();\n// Check to see if the current participant is a driver.\nif (currentParticipant.getFullyQualifiedType() !== 'org.acme.Driver') {\n  // Throw an error as the current participant is not a driver.\n  throw new Error('Current participant is not a driver');\n}\n// Check to see if the current participant is the first driver.\nif (currentParticipant.getFullyQualifiedIdentifier() !== 'org.acme.Driver#DRIVER_1') {\n  // Throw an error as the current participant is not a driver.\n  throw new Error('Current participant is not the first driver');\n}","commentData":{"description":"Get the current participant. The current participant is determined by\nthe identity that was used to submit the current transaction.","tags":[{"title":"example","description":"// Get the current participant.\nvar currentParticipant = getCurrentParticipant();\n// Check to see if the current participant is a driver.\nif (currentParticipant.getFullyQualifiedType() !== 'org.acme.Driver') {\n  // Throw an error as the current participant is not a driver.\n  throw new Error('Current participant is not a driver');\n}\n// Check to see if the current participant is the first driver.\nif (currentParticipant.getFullyQualifiedIdentifier() !== 'org.acme.Driver#DRIVER_1') {\n  // Throw an error as the current participant is not a driver.\n  throw new Error('Current participant is not the first driver');\n}"},{"title":"method","description":null,"name":"module:composer-runtime#getCurrentParticipant"},{"title":"public","description":null,"type":null},{"title":"return","description":"The current participant,\nor null if the transaction was submitted using an identity that does\nnot map to a participant.","type":{"type":"NameExpression","name":"module:composer-common.Resource"}}]},"description":["Get the current participant. The current participant is determined by the identity that was used to submit the current transaction."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["The current participant, or null if the transaction was submitted using an identity that does not map to a participant."],"type":"module:composer-common.Resource"},"summary":"Get the current participant"},{"visibility":"+","returnType":"Promise","name":"post","parameterTypes":["string","Typed","object"],"parameterNames":["url","typed","options"],"throws":"","decorators":["method","param","param","param","return","public"],"functionText":"function post(url, typed, options) {\n            const method = 'post';\n            LOG.entry(method, url, typed);\n            const data = serializer.toJSON(typed, options);\n            LOG.debug(method, typed.getFullyQualifiedType(), data);\n\n            return httpService.post(url, data)\n                .then((response) => {\n                    LOG.exit(method);\n                    return Promise.resolve(response);\n                });\n        }","example":"","commentData":{"description":"Post a typed instance to a HTTP URL","tags":[{"title":"method","description":null,"name":"module:composer-runtime#post"},{"title":"param","description":"The URL to post the data to","type":{"type":"NameExpression","name":"string"},"name":"url"},{"title":"param","description":"The typed instance to be posted. The instance will be serialized to JSON.","type":{"type":"NameExpression","name":"Typed"},"name":"typed"},{"title":"param","description":"The options that are passed to Serializer.toJSON","type":{"type":"NameExpression","name":"object"},"name":"options"},{"title":"return","description":"A promise. The promise is resolved with a HttpResponse\nthat represents the result of the HTTP POST.","type":{"type":"NameExpression","name":"Promise"}},{"title":"public","description":null}]},"description":["Post a typed instance to a HTTP URL"],"parameters":[{"description":"The URL to post the data to","type":"string","name":"url","optional":false},{"description":"The typed instance to be posted. The instance will be serialized to JSON.","type":"Typed","name":"typed","optional":false},{"description":"The options that are passed to Serializer.toJSON","type":"object","name":"options","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with a HttpResponse that represents the result of the HTTP POST."],"type":"Promise"}},{"visibility":"+","returnType":"void","name":"emit","parameterTypes":["Resource"],"parameterNames":["event"],"throws":"","decorators":["method","param","public"],"functionText":"function emit(event) {\n            const method = 'emit';\n            LOG.entry(method, event);\n            event.setIdentifier(context.getTransaction().getIdentifier() + '#' + context.getEventNumber());\n            event.timestamp = context.getTransaction().timestamp;\n            let serializedEvent = serializer.toJSON(event, {\n                convertResourcesToRelationships: true\n            });\n            context.incrementEventNumber();\n            LOG.debug(method, event.getFullyQualifiedIdentifier(), serializedEvent);\n            eventService.emit(serializedEvent);\n            LOG.exit(method);\n        }","example":"","commentData":{"description":"Emit an event defined in the transaction","tags":[{"title":"method","description":null,"name":"module:composer-runtime#emit"},{"title":"param","description":"The event to be emitted","type":{"type":"NameExpression","name":"Resource"},"name":"event"},{"title":"public","description":null}]},"description":["Emit an event defined in the transaction"],"parameters":[{"description":"The event to be emitted","type":"Resource","name":"event","optional":false}],"suboptions":[],"seeAlso":[]},{"visibility":"+","returnType":"Query","name":"buildQuery","parameterTypes":["string"],"parameterNames":["query"],"throws":"","decorators":["example","method","param","return","public"],"functionText":"function buildQuery(query) {\n            const method = 'buildQuery';\n            LOG.entry(method, query);\n            const identifier = context.getCompiledQueryBundle().buildQuery(query);\n            const result = new Query(identifier);\n            LOG.exit(method, result);\n            return result;\n        }","example":"// Build a query.\nvar query = buildQuery('SELECT org.acme.sample.SampleAsset WHERE (value == _$inputValue)');\n// Execute the query.\nreturn query(query, { inputValue: 'blue' })\n  .then(function (assets) {\n    assets.forEach(function (asset) {\n      // Process each asset.\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Build a query ready for later execution. The specified query string must be written\nin the Composer query language.\n\nThis functionality is Blockchain platform dependent. For example, when a Composer\nbusiness network is deployed to Hyperledger Fabric v1.0, Hyperledger Fabric must be\nconfigured with the CouchDB database for the world state.","tags":[{"title":"example","description":"// Build a query.\nvar query = buildQuery('SELECT org.acme.sample.SampleAsset WHERE (value == _$inputValue)');\n// Execute the query.\nreturn query(query, { inputValue: 'blue' })\n  .then(function (assets) {\n    assets.forEach(function (asset) {\n      // Process each asset.\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"method","description":null,"name":"module:composer-runtime#buildQuery"},{"title":"param","description":"The query string, written using the Composer query language.","type":{"type":"NameExpression","name":"string"},"name":"query"},{"title":"return","description":"The built query, which can be passed in a call to query.","type":{"type":"NameExpression","name":"Query"}},{"title":"public","description":null}]},"description":["Build a query ready for later execution. The specified query string must be written in the Composer query language.","This functionality is Blockchain platform dependent. For example, when a Composer business network is deployed to Hyperledger Fabric v1.0, Hyperledger Fabric must be configured with the CouchDB database for the world state."],"parameters":[{"description":"The query string, written using the Composer query language.","type":"string","name":"query","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["The built query, which can be passed in a call to query."],"type":"Query","fqntype":"runtime-Query"},"summary":"Build a query ready for later execution"},{"visibility":"+","returnType":"Promise","name":"query","parameterTypes":["Object"],"parameterNames":["query","parameters"],"throws":"","decorators":["example","method","param","param","return","link","public"],"functionText":"function query(query, parameters) {\n            const method = 'query';\n            LOG.entry(method, query);\n            let identifier;\n            if (query instanceof Query) {\n                identifier = query.getIdentifier();\n            } else if (typeof query === 'string') {\n                identifier = query;\n            } else {\n                throw new Error('Invalid query; expecting a built query or the name of a query');\n            }\n            return context.getCompiledQueryBundle().execute(dataService, identifier, parameters)\n                .then((objects) => {\n                    return objects.map((object) => {\n                        object = Registry.removeInternalProperties(object);\n                        return serializer.fromJSON(object);\n                    }).reduce((resources, resource) => {\n                        return resources.then((resources) => {\n                            return accessController.check(resource, 'READ')\n                                .then(() => {\n                                    resources.push(resource);\n                                    return resources;\n                                })\n                                .catch((error) => {\n                                    return resources;\n                                });\n                        });\n                    }, Promise.resolve([]));\n                })\n                .then((resources) => {\n                    LOG.exit(method, resources);\n                    return resources;\n                });\n        }","example":"// Execute the query.\nreturn query('Q1', { inputValue: 'blue' })\n  .then(function (assets) {\n    assets.forEach(function (asset) {\n      // Process each asset.\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Execute a query defined in a Composer query file, or execute a query built with buildQuery.\n\nThis functionality is Blockchain platform dependent. For example, when a Composer\nbusiness network is deployed to Hyperledger Fabric v1.0, Hyperledger Fabric must be\nconfigured with the CouchDB database for the world state.","tags":[{"title":"example","description":"// Execute the query.\nreturn query('Q1', { inputValue: 'blue' })\n  .then(function (assets) {\n    assets.forEach(function (asset) {\n      // Process each asset.\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"method","description":null,"name":"module:composer-runtime#query"},{"title":"param","description":"The name of the query, or a built query.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"Query"}]},"name":"query"},{"title":"param","description":"The parameters for the query.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"parameters"},{"title":"return","description":"A promise that will be resolved with an array of\n{@link module:composer-common.Resource Resource} representing the\nresources returned by the query.","type":{"type":"NameExpression","name":"Promise"}},{"title":"public","description":null}]},"description":["Execute a query defined in a Composer query file, or execute a query built with buildQuery.","This functionality is Blockchain platform dependent. For example, when a Composer business network is deployed to Hyperledger Fabric v1.0, Hyperledger Fabric must be configured with the CouchDB database for the world state."],"parameters":[{"description":"The name of the query, or a built query.","name":"query","type":"string; Query","optional":false},{"description":"The parameters for the query.","type":"Object","name":"parameters","optional":true}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise that will be resolved with an array of {@link module:composer-common.Resource Resource} representing the resources returned by the query."],"type":"Promise"},"summary":"Execute a query defined in a Composer query file, or execute a query built with buildQuery"}],"description":["A class that contains the root of the transaction processor API. Methods in this class are made available as global functions which can be called by transaction processor functions. The transaction processor API should expose no internal properties or internal methods which could be accessed or misused."],"seeAlso":[],"visibility":"public","module":"runtime","summary":"A class that contains the root of the transaction processor API"}