{"name":"AssetRegistry","commentData":{"description":"The AssetRegistry is used to manage a set of assets stored on the Blockchain.\n\nDo not attempt to create an instance of this class.\nYou must use the {@link runtime-api#getAssetRegistry getAssetRegistry}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"AssetRegistry"},{"title":"summary","description":"An asset registry manages a set of assets."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"methods":[{"visibility":"+","returnType":"Promise","name":"getAll","parameterTypes":[],"parameterNames":[],"throws":"","decorators":["example","public","method","return","link"],"functionText":"function getAll() {\n            return registry.getAll();\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get all of the vehicles in the vehicle asset registry.\n    return assetRegistry.getAll();\n  })\n  .then(function (vehicles) {\n    // Process the array of vehicle objects.\n    vehicles.forEach(function (vehicle) {\n      console.log(vehicle.vehicleId);\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get a list of all of the existing assets in this asset registry.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get all of the vehicles in the vehicle asset registry.\n    return assetRegistry.getAll();\n  })\n  .then(function (vehicles) {\n    // Process the array of vehicle objects.\n    vehicles.forEach(function (vehicle) {\n      console.log(vehicle.vehicleId);\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#getAll"},{"title":"return","description":"A promise. The promise is resolved with an array of\n{@link common-Resource} instances representing all of the assets stored in this\nasset registry. If the asset registry does not exist, or the current\nuser does not have access to the asset registry, then the promise will\nbe rejected with an error that describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get a list of all of the existing assets in this asset registry."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with an array of {@link common-Resource} instances representing all of the assets stored in this asset registry. If the asset registry does not exist, or the current user does not have access to the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Get a list of all of the existing assets in this asset registry"},{"visibility":"+","returnType":"Promise","name":"get","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","public","method","param","return","link"],"functionText":"function get(id) {\n            return registry.get(id);\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the specific vehicle from the vehicle asset registry.\n    return assetRegistry.get('VEHICLE_1');\n  })\n  .then(function (vehicle) {\n    // Process the the vehicle object.\n    console.log(vehicle.vehicleId);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get the specified asset in this asset registry using the unique identifier\nof the asset.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the specific vehicle from the vehicle asset registry.\n    return assetRegistry.get('VEHICLE_1');\n  })\n  .then(function (vehicle) {\n    // Process the the vehicle object.\n    console.log(vehicle.vehicleId);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#get"},{"title":"param","description":"The ID of the asset.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with a {@link common-Resource}\ninstance representing the specified asset in this asset registry. If the\nspecified asset does not exist, or the current user does not have access\nto the specified asset, then the promise will be rejected with an error\nthat describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get the specified asset in this asset registry using the unique identifier of the asset."],"parameters":[{"description":"The ID of the asset.","type":"string","name":"id","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with a {@link common-Resource} instance representing the specified asset in this asset registry. If the specified asset does not exist, or the current user does not have access to the specified asset, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Get the specified asset in this asset registry using the unique identifier of the asset"},{"visibility":"+","returnType":"Promise","name":"exists","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function exists(id) {\n            return registry.exists(id);\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Determine if the specific vehicle exists in the vehicle asset registry.\n    return assetRegistry.exists('VEHICLE_1');\n  })\n  .then(function (exists) {\n    // Process the the boolean result.\n    console.log('Vehicle exists', exists);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Determines whether a specific asset exists in this asset registry.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Determine if the specific vehicle exists in the vehicle asset registry.\n    return assetRegistry.exists('VEHICLE_1');\n  })\n  .then(function (exists) {\n    // Process the the boolean result.\n    console.log('Vehicle exists', exists);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#exists"},{"title":"param","description":"The ID of the asset.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with a boolean which\nis true if the specified asset exists in this asset registry, and false\nif the specified participant does not exist.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Determines whether a specific asset exists in this asset registry."],"parameters":[{"description":"The ID of the asset.","type":"string","name":"id","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with a boolean which is true if the specified asset exists in this asset registry, and false if the specified participant does not exist."],"type":"Promise"},"summary":"Determines whether a specific asset exists in this asset registry"},{"visibility":"+","returnType":"Promise","name":"addAll","parameterTypes":["Resource[]"],"parameterNames":["assets"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function addAll(assets) {\n            return registry.addAll(assets, { convertResourcesToRelationships: true });\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Create the first vehicle.\n    var vehicle1 = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n    vehicle1.colour = 'BLUE';\n    // Create the second vehicle.\n    var vehicle2 = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_2');\n    vehicle2.colour = 'GREEN';\n    // Add the vehicles to the vehicle asset registry.\n    return vehicleAssetRegistry.addAll([vehicle1, vehicle2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Add all of the specified assets to this asset registry.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Create the first vehicle.\n    var vehicle1 = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n    vehicle1.colour = 'BLUE';\n    // Create the second vehicle.\n    var vehicle2 = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_2');\n    vehicle2.colour = 'GREEN';\n    // Add the vehicles to the vehicle asset registry.\n    return vehicleAssetRegistry.addAll([vehicle1, vehicle2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#addAll"},{"title":"param","description":"The assets to add to this asset registry.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]},"name":"assets"},{"title":"return","description":"A promise. The promise is resolved when all of the\nassets have been added to this asset registry. If the assets cannot be\nadded to this asset registry, or if the assets already exist in the\nasset registry, then the promise will be rejected with an error\nthat describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add all of the specified assets to this asset registry."],"parameters":[{"description":"The assets to add to this asset registry.","name":"assets","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when all of the assets have been added to this asset registry. If the assets cannot be added to this asset registry, or if the assets already exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Add all of the specified assets to this asset registry"},{"visibility":"+","returnType":"Promise","name":"add","parameterTypes":["Resource"],"parameterNames":["asset"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function add(asset) {\n            return registry.add(asset, { convertResourcesToRelationships: true });\n        }","example":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Create the vehicle.\n    var vehicle = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n    vehicle.colour = 'BLUE';\n    // Add the vehicle to the vehicle asset registry.\n    return vehicleAssetRegistry.add(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Add the specified asset to this asset registry.","tags":[{"title":"example","description":"// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Create the vehicle.\n    var vehicle = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n    vehicle.colour = 'BLUE';\n    // Add the vehicle to the vehicle asset registry.\n    return vehicleAssetRegistry.add(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#add"},{"title":"param","description":"The assets to add to this asset registry.","type":{"type":"NameExpression","name":"Resource"},"name":"asset"},{"title":"return","description":"A promise. The promise is resolved when the asset has\nbeen added to this asset registry. If the asset cannot be added to this\nasset registry, or if the asset already exists in the asset registry,\nthen the promise will be rejected with an error that describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add the specified asset to this asset registry."],"parameters":[{"description":"The assets to add to this asset registry.","type":"Resource","name":"asset","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when the asset has been added to this asset registry. If the asset cannot be added to this asset registry, or if the asset already exists in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Add the specified asset to this asset registry"},{"visibility":"+","returnType":"Promise","name":"updateAll","parameterTypes":["Resource[]"],"parameterNames":["assets"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function updateAll(assets) {\n            return registry.updateAll(assets, { convertResourcesToRelationships: true });\n        }","example":"// The existing vehicles that have come from elsewhere.\nvar vehicle1;\nvar vehicle2;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Modify the properties of the first vehicle.\n    vehicle1.colour = 'PURPLE';\n    // Modify the properties of the second vehicle.\n    vehicle2.colour = 'ORANGE';\n    // Update the vehicles in the vehicle asset registry.\n    return vehicleAssetRegistry.updateAll([vehicle1, vehicle2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Update all of the specified assets in this asset registry.","tags":[{"title":"example","description":"// The existing vehicles that have come from elsewhere.\nvar vehicle1;\nvar vehicle2;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Modify the properties of the first vehicle.\n    vehicle1.colour = 'PURPLE';\n    // Modify the properties of the second vehicle.\n    vehicle2.colour = 'ORANGE';\n    // Update the vehicles in the vehicle asset registry.\n    return vehicleAssetRegistry.updateAll([vehicle1, vehicle2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#updateAll"},{"title":"param","description":"The assets to update in this asset registry.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]},"name":"assets"},{"title":"return","description":"A promise. The promise is resolved when all of the\nassets have been updated in this asset registry. If the assets cannot be\nupdated in this asset registry, or if the assets do not exist in the\nasset registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Update all of the specified assets in this asset registry."],"parameters":[{"description":"The assets to update in this asset registry.","name":"assets","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when all of the assets have been updated in this asset registry. If the assets cannot be updated in this asset registry, or if the assets do not exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Update all of the specified assets in this asset registry"},{"visibility":"+","returnType":"Promise","name":"update","parameterTypes":["Resource"],"parameterNames":["asset"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function update(asset) {\n            return registry.update(asset, { convertResourcesToRelationships: true });\n        }","example":"// The existing vehicle that has come from elsewhere.\nvar vehicle;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Modify the properties of the vehicle.\n    vehicle.colour = 'PURPLE';\n    // Update the vehicle in the vehicle asset registry.\n    return vehicleAssetRegistry.update(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Update the specified asset in this asset registry.","tags":[{"title":"example","description":"// The existing vehicle that has come from elsewhere.\nvar vehicle;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Modify the properties of the vehicle.\n    vehicle.colour = 'PURPLE';\n    // Update the vehicle in the vehicle asset registry.\n    return vehicleAssetRegistry.update(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#update"},{"title":"param","description":"The asset to update in this asset registry.","type":{"type":"NameExpression","name":"Resource"},"name":"asset"},{"title":"return","description":"A promise. The promise is resolved when the asset\nhave been updated in this asset registry. If the asset cannot be\nupdated in this asset registry, or if the asset does not exist in the\nasset registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Update the specified asset in this asset registry."],"parameters":[{"description":"The asset to update in this asset registry.","type":"Resource","name":"asset","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when the asset have been updated in this asset registry. If the asset cannot be updated in this asset registry, or if the asset does not exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Update the specified asset in this asset registry"},{"visibility":"+","returnType":"Promise","name":"removeAll","parameterTypes":[],"parameterNames":["assets"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function removeAll(assets) {\n            return registry.removeAll(assets);\n        }","example":"// The existing vehicles that have come from elsewhere.\nvar vehicle1;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Remove the vehicles from the vehicle asset registry. Note that\n    // one vehicle is specified as a vehicle instance, and the other\n    // vehicle is specified by the ID of the vehicle.\n    return vehicleAssetRegistry.removeAll([vehicle1, 'VEHICLE_2']);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Remove all of the specified assets from this asset registry.","tags":[{"title":"example","description":"// The existing vehicles that have come from elsewhere.\nvar vehicle1;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Remove the vehicles from the vehicle asset registry. Note that\n    // one vehicle is specified as a vehicle instance, and the other\n    // vehicle is specified by the ID of the vehicle.\n    return vehicleAssetRegistry.removeAll([vehicle1, 'VEHICLE_2']);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#removeAll"},{"title":"param","description":"The assets, or the IDs of the assets,\nto remove from this asset registry.","type":{"type":"UnionType","elements":[{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]},{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]}]},"name":"assets"},{"title":"return","description":"A promise. The promise is resolved when all of the\nassets have been removed from this asset registry. If the assets cannot be\nremoved from this asset registry, or if the assets do not exist in the\nasset registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Remove all of the specified assets from this asset registry."],"parameters":[{"description":"The assets, or the IDs of the assets, to remove from this asset registry.","name":"assets","type":"; ","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when all of the assets have been removed from this asset registry. If the assets cannot be removed from this asset registry, or if the assets do not exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Remove all of the specified assets from this asset registry"},{"visibility":"+","returnType":"Promise","name":"remove","parameterTypes":[],"parameterNames":["asset"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function remove(asset) {\n            return registry.remove(asset);\n        }","example":"// The existing vehicle that has come from elsewhere.\nvar vehicle;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Remove the vehicle from the vehicle asset registry.\n    return vehicleAssetRegistry.remove(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Remove the specified asset from this asset registry.","tags":[{"title":"example","description":"// The existing vehicle that has come from elsewhere.\nvar vehicle;\n// Get the vehicle asset registry.\nreturn getAssetRegistry('org.acme.Vehicle')\n  .then(function (vehicleAssetRegistry) {\n    // Get the factory for creating new asset instances.\n    var factory = getFactory();\n    // Remove the vehicle from the vehicle asset registry.\n    return vehicleAssetRegistry.remove(vehicle);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.AssetRegistry#remove"},{"title":"param","description":"The asset, or ID of the asset, to remove\nfrom this asset registry.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"Resource"}]},"name":"asset"},{"title":"return","description":"A promise. The promise is resolved when the asset\nhas been removed from this asset registry. If the asset cannot be\nremoved from this asset registry, or if the asset does not exist in the\nasset registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Remove the specified asset from this asset registry."],"parameters":[{"description":"The asset, or ID of the asset, to remove from this asset registry.","name":"asset","type":"string; Resource","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when the asset has been removed from this asset registry. If the asset cannot be removed from this asset registry, or if the asset does not exist in the asset registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Remove the specified asset from this asset registry"}],"description":["The AssetRegistry is used to manage a set of assets stored on the Blockchain.","Do not attempt to create an instance of this class. You must use the {@link runtime-api#getAssetRegistry getAssetRegistry} method instead."],"seeAlso":[],"visibility":"public","module":"runtime","summary":"The AssetRegistry is used to manage a set of assets stored on the Blockchain"}