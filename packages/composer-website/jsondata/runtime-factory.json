{"name":"Factory","commentData":{"description":"Use the Factory to create instances of Resource: transactions, participants and assets.\n\nDo not attempt to create an instance of this class.<br>\nYou must use the {@link runtime-api#getFactory getFactory}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"Factory"},{"title":"summary","description":"A factory creates new instances of assets, participants, transactions,\nand relationships."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"methods":[{"visibility":"+","returnType":"Resource","name":"newResource","parameterTypes":["string","string","string"],"parameterNames":["ns","type","id"],"throws":"Error","decorators":["link","example","public","method","param","param","param","return","throws"],"functionText":"function newResource(ns, type, id) {\n            return factory.newResource(ns, type, id);\n        }","example":"// Get the factory.\nvar factory = getFactory();\n// Create a new vehicle.\nvar vehicle = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n// Set the properties of the new vehicle.\nvehicle.colour = 'BLUE';\nvehicle.manufacturer = 'Toyota';","commentData":{"description":"Create a new resource (an instance of an asset, participant, or transaction). The\nproperties of the new instance should be set as standard JavaScript\nobject properties. The new instance can then be stored in a registry\nusing the appropriate registry APIs, for example {@link AssetRegistry}.","tags":[{"title":"example","description":"// Get the factory.\nvar factory = getFactory();\n// Create a new vehicle.\nvar vehicle = factory.newResource('org.acme', 'Vehicle', 'VEHICLE_1');\n// Set the properties of the new vehicle.\nvehicle.colour = 'BLUE';\nvehicle.manufacturer = 'Toyota';"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.Factory#newResource"},{"title":"param","description":"The namespace of the resource to create.","type":{"type":"NameExpression","name":"string"},"name":"ns"},{"title":"param","description":"The type of the resource to create.","type":{"type":"NameExpression","name":"string"},"name":"type"},{"title":"param","description":"The identifier of the new resource.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"The new instance of the resource.","type":{"type":"NameExpression","name":"Resource"}},{"title":"throws","description":"If the specified type (specified by the namespace and\ntype) is not defined in the current version of the business network.","type":{"type":"NameExpression","name":"Error"}}]},"description":["Create a new resource (an instance of an asset, participant, or transaction). The properties of the new instance should be set as standard JavaScript object properties. The new instance can then be stored in a registry using the appropriate registry APIs, for example {@link AssetRegistry}."],"parameters":[{"description":"The namespace of the resource to create.","type":"string","name":"ns","optional":false},{"description":"The type of the resource to create.","type":"string","name":"type","optional":false},{"description":"The identifier of the new resource.","type":"string","name":"id","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["The new instance of the resource."],"type":"Resource","fqntype":"common-Resource"},"summary":"Create a new resource (an instance of an asset, participant, or transaction)"},{"visibility":"+","returnType":"Relationship","name":"newRelationship","parameterTypes":["string","string","string"],"parameterNames":["ns","type","id"],"throws":"Error","decorators":["example","public","method","param","param","param","return","throws"],"functionText":"function newRelationship(ns, type, id) {\n            return factory.newRelationship(ns, type, id);\n        }","example":"// The existing driver of the vehicle.\nvar driver;\n// Get the factory.\nvar factory = getFactory();\n// Create a new relationship to the vehicle.\nvar vehicle = factory.newRelationship('org.acme', 'Vehicle', 'VEHICLE_1');\n// Set the relationship as the value of the vehicle property of the driver.\ndriver.vehicle = vehicle;","commentData":{"description":"Create a new relationship with a given namespace, type, and identifier.\nA relationship is a typed pointer to an instance. For example, a new\nrelationship with namespace 'org.acme', type 'Vehicle' and identifier\n'VEHICLE_1' creates` a pointer that points at an existing instance of\norg.acme.Vehicle with the identifier 'VEHICLE_1'.","tags":[{"title":"example","description":"// The existing driver of the vehicle.\nvar driver;\n// Get the factory.\nvar factory = getFactory();\n// Create a new relationship to the vehicle.\nvar vehicle = factory.newRelationship('org.acme', 'Vehicle', 'VEHICLE_1');\n// Set the relationship as the value of the vehicle property of the driver.\ndriver.vehicle = vehicle;"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.Factory#newRelationship"},{"title":"param","description":"The namespace of the resource referenced by the relationship.","type":{"type":"NameExpression","name":"string"},"name":"ns"},{"title":"param","description":"The type of the resource referenced by the relationship.","type":{"type":"NameExpression","name":"string"},"name":"type"},{"title":"param","description":"The identifier of the resource referenced by the relationship.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"The new instance of the relationship.","type":{"type":"NameExpression","name":"Relationship"}},{"title":"throws","description":"If the specified type (specified by the namespace and\ntype) is not defined in the current version of the business network.","type":{"type":"NameExpression","name":"Error"}}]},"description":["Create a new relationship with a given namespace, type, and identifier. A relationship is a typed pointer to an instance. For example, a new relationship with namespace 'org.acme', type 'Vehicle' and identifier 'VEHICLE_1' creates` a pointer that points at an existing instance of org.acme.Vehicle with the identifier 'VEHICLE_1'."],"parameters":[{"description":"The namespace of the resource referenced by the relationship.","type":"string","name":"ns","optional":false},{"description":"The type of the resource referenced by the relationship.","type":"string","name":"type","optional":false},{"description":"The identifier of the resource referenced by the relationship.","type":"string","name":"id","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["The new instance of the relationship."],"type":"Relationship","fqntype":"common-Relationship"},"summary":"Create a new relationship with a given namespace, type, and identifier"},{"visibility":"+","returnType":"Concept","name":"newConcept","parameterTypes":["string","string"],"parameterNames":["ns","type"],"throws":"Error","decorators":["example","public","method","param","param","return","throws"],"functionText":"function newConcept(ns, type) {\n            return factory.newConcept(ns, type);\n        }","example":"// The existing driver of the vehicle.\nvar person;\n// Get the factory.\nvar factory = getFactory();\n// Create a new relationship to the vehicle.\nvar record = factory.newConcept('org.acme', 'Record');\n// Add the record to the persons array of records.\nperson.records.push(record);","commentData":{"description":"Create a new concept with a given namespace, type, and identifier.\nA concept is an advanced data structure","tags":[{"title":"example","description":"// The existing driver of the vehicle.\nvar person;\n// Get the factory.\nvar factory = getFactory();\n// Create a new relationship to the vehicle.\nvar record = factory.newConcept('org.acme', 'Record');\n// Add the record to the persons array of records.\nperson.records.push(record);"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.Factory#newConcept"},{"title":"param","description":"The namespace of the concept.","type":{"type":"NameExpression","name":"string"},"name":"ns"},{"title":"param","description":"The type of the concept.","type":{"type":"NameExpression","name":"string"},"name":"type"},{"title":"return","description":"The new instance of the concept.","type":{"type":"NameExpression","name":"Concept"}},{"title":"throws","description":"If the specified type (specified by the namespace and\ntype) is not defined in the current version of the business network.","type":{"type":"NameExpression","name":"Error"}}]},"description":["Create a new concept with a given namespace, type, and identifier. A concept is an advanced data structure"],"parameters":[{"description":"The namespace of the concept.","type":"string","name":"ns","optional":false},{"description":"The type of the concept.","type":"string","name":"type","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["The new instance of the concept."],"type":"Concept","fqntype":"common-Concept"},"summary":"Create a new concept with a given namespace, type, and identifier"},{"visibility":"+","returnType":"Resource","name":"newEvent","parameterTypes":["string","string"],"parameterNames":["ns","type"],"throws":"Error","decorators":["public","method","param","param","return","throws"],"functionText":"function newEvent(ns, type) {\n            return factory.newEvent(ns, type);\n        }","example":"","commentData":{"description":"Create a new type with a given namespace and type","tags":[{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.Factory#newEvent"},{"title":"param","description":"The namespace of the event.","type":{"type":"NameExpression","name":"string"},"name":"ns"},{"title":"param","description":"The type of the event.","type":{"type":"NameExpression","name":"string"},"name":"type"},{"title":"return","description":"The new instance of the event.","type":{"type":"NameExpression","name":"Resource"}},{"title":"throws","description":"If the specified type (specified by the namespace and\ntype) is not defined in the current version of the business network.","type":{"type":"NameExpression","name":"Error"}}]},"description":["Create a new type with a given namespace and type"],"parameters":[{"description":"The namespace of the event.","type":"string","name":"ns","optional":false},{"description":"The type of the event.","type":"string","name":"type","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["The new instance of the event."],"type":"Resource","fqntype":"common-Resource"}}],"description":["Use the Factory to create instances of Resource: transactions, participants and assets.","Do not attempt to create an instance of this class.<br> You must use the {@link runtime-api#getFactory getFactory} method instead."],"seeAlso":[],"visibility":"public","module":"runtime","summary":"Use the Factory to create instances of Resource: transactions, participants and assets"}