{"name":"ParticipantRegistry","commentData":{"description":"The ParticipantRegistry is used to manage a set of participants stored on the blockchain.\n\nDo not attempt to create an instance of this class. You must use the {@link runtime-api#getParticipantRegistry getParticipantRegistry}\nmethod instead.","tags":[{"title":"class","description":null,"type":null,"name":"ParticipantRegistry"},{"title":"summary","description":"An participant registry manages a set of participants."},{"title":"memberof","description":"module:composer-runtime"},{"title":"public","description":null}]},"methods":[{"visibility":"+","returnType":"Promise","name":"getAll","parameterTypes":[],"parameterNames":[],"throws":"","decorators":["example","public","method","return","link"],"functionText":"function getAll() {\n            return registry.getAll();\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get all of the drivers in the driver participant registry.\n    return participantRegistry.getAll();\n  })\n  .then(function (drivers) {\n    // Process the array of driver objects.\n    drivers.forEach(function (driver) {\n      console.log(driver.driverId);\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get a list of all of the existing participants in this participant registry.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get all of the drivers in the driver participant registry.\n    return participantRegistry.getAll();\n  })\n  .then(function (drivers) {\n    // Process the array of driver objects.\n    drivers.forEach(function (driver) {\n      console.log(driver.driverId);\n    });\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#getAll"},{"title":"return","description":"A promise. The promise is resolved with an array of\n{@link common-Resource} instances representing all of the participants stored in this\nparticipant registry. If the participant registry does not exist, or the current\nuser does not have access to the participant registry, then the promise will\nbe rejected with an error that describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get a list of all of the existing participants in this participant registry."],"parameters":[],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with an array of {@link common-Resource} instances representing all of the participants stored in this participant registry. If the participant registry does not exist, or the current user does not have access to the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Get a list of all of the existing participants in this participant registry"},{"visibility":"+","returnType":"Promise","name":"get","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","public","method","param","return","link"],"functionText":"function get(id) {\n            return registry.get(id);\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the specific driver from the driver participant registry.\n    return participantRegistry.get('VEHICLE_1');\n  })\n  .then(function (driver) {\n    // Process the the driver object.\n    console.log(driver.driverId);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Get the specified participant in this participant registry using the unique identifier\nof the participant.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the specific driver from the driver participant registry.\n    return participantRegistry.get('VEHICLE_1');\n  })\n  .then(function (driver) {\n    // Process the the driver object.\n    console.log(driver.driverId);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#get"},{"title":"param","description":"The ID of the participant.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with a {@link common-Resource}\ninstance representing the specified participant in this participant registry. If the\nspecified participant does not exist, or the current user does not have access\nto the specified participant, then the promise will be rejected with an error\nthat describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Get the specified participant in this participant registry using the unique identifier of the participant."],"parameters":[{"description":"The ID of the participant.","type":"string","name":"id","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with a {@link common-Resource} instance representing the specified participant in this participant registry. If the specified participant does not exist, or the current user does not have access to the specified participant, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Get the specified participant in this participant registry using the unique identifier of the participant"},{"visibility":"+","returnType":"Promise","name":"exists","parameterTypes":["string"],"parameterNames":["id"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function exists(id) {\n            return registry.exists(id);\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Determine if the specific driver exists in the driver participant registry.\n    return participantRegistry.exists('VEHICLE_1');\n  })\n  .then(function (exists) {\n    // Process the the boolean result.\n    console.log('Driver exists', exists);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Determines whether a specific participant exists in this participant registry.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Determine if the specific driver exists in the driver participant registry.\n    return participantRegistry.exists('VEHICLE_1');\n  })\n  .then(function (exists) {\n    // Process the the boolean result.\n    console.log('Driver exists', exists);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#exists"},{"title":"param","description":"The ID of the participant.","type":{"type":"NameExpression","name":"string"},"name":"id"},{"title":"return","description":"A promise. The promise is resolved with a boolean which\nis true if the specified participant exists in this participant registry,\nand false if the specified participant does not exist.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Determines whether a specific participant exists in this participant registry."],"parameters":[{"description":"The ID of the participant.","type":"string","name":"id","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved with a boolean which is true if the specified participant exists in this participant registry, and false if the specified participant does not exist."],"type":"Promise"},"summary":"Determines whether a specific participant exists in this participant registry"},{"visibility":"+","returnType":"Promise","name":"addAll","parameterTypes":["Resource[]"],"parameterNames":["participants"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function addAll(participants) {\n            return registry.addAll(participants, { convertResourcesToRelationships: true });\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Create the first driver.\n    var driver1 = factory.newResource('org.acme', 'Driver', 'VEHICLE_1');\n    driver1.location = 'Southampton';\n    // Create the second driver.\n    var driver2 = factory.newResource('org.acme', 'Driver', 'VEHICLE_2');\n    driver2.location = 'GREEN';\n    // Add the drivers to the driver participant registry.\n    return participantRegistry.addAll([driver1, driver2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Add all of the specified participants to this participant registry.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Create the first driver.\n    var driver1 = factory.newResource('org.acme', 'Driver', 'VEHICLE_1');\n    driver1.location = 'Southampton';\n    // Create the second driver.\n    var driver2 = factory.newResource('org.acme', 'Driver', 'VEHICLE_2');\n    driver2.location = 'GREEN';\n    // Add the drivers to the driver participant registry.\n    return participantRegistry.addAll([driver1, driver2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#addAll"},{"title":"param","description":"The participants to add to this participant registry.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]},"name":"participants"},{"title":"return","description":"A promise. The promise is resolved when all of the\nparticipants have been added to this participant registry. If the participants cannot be\nadded to this participant registry, or if the participants already exist in the\nparticipant registry, then the promise will be rejected with an error\nthat describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add all of the specified participants to this participant registry."],"parameters":[{"description":"The participants to add to this participant registry.","name":"participants","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when all of the participants have been added to this participant registry. If the participants cannot be added to this participant registry, or if the participants already exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Add all of the specified participants to this participant registry"},{"visibility":"+","returnType":"Promise","name":"add","parameterTypes":["Resource"],"parameterNames":["participant"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function add(participant) {\n            return registry.add(participant, { convertResourcesToRelationships: true });\n        }","example":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Create the driver.\n    var driver = factory.newResource('org.acme', 'Driver', 'VEHICLE_1');\n    driver.location = 'Southampton';\n    // Add the driver to the driver participant registry.\n    return participantRegistry.add(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Add the specified participant to this participant registry.","tags":[{"title":"example","description":"// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Create the driver.\n    var driver = factory.newResource('org.acme', 'Driver', 'VEHICLE_1');\n    driver.location = 'Southampton';\n    // Add the driver to the driver participant registry.\n    return participantRegistry.add(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#add"},{"title":"param","description":"The participants to add to this participant registry.","type":{"type":"NameExpression","name":"Resource"},"name":"participant"},{"title":"return","description":"A promise. The promise is resolved when the participant has\nbeen added to this participant registry. If the participant cannot be added to this\nparticipant registry, or if the participant already exists in the participant registry,\nthen the promise will be rejected with an error that describes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Add the specified participant to this participant registry."],"parameters":[{"description":"The participants to add to this participant registry.","type":"Resource","name":"participant","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when the participant has been added to this participant registry. If the participant cannot be added to this participant registry, or if the participant already exists in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Add the specified participant to this participant registry"},{"visibility":"+","returnType":"Promise","name":"updateAll","parameterTypes":["Resource[]"],"parameterNames":["participants"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function updateAll(participants) {\n            return registry.updateAll(participants, { convertResourcesToRelationships: true });\n        }","example":"// The existing drivers that have come from elsewhere.\nvar driver1;\nvar driver2;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Modify the properties of the first driver.\n    driver1.location = 'Hursley';\n    // Modify the properties of the second driver.\n    driver2.location = 'London';\n    // Update the drivers in the driver participant registry.\n    return participantRegistry.updateAll([driver1, driver2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Update all of the specified participants in this participant registry.","tags":[{"title":"example","description":"// The existing drivers that have come from elsewhere.\nvar driver1;\nvar driver2;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Modify the properties of the first driver.\n    driver1.location = 'Hursley';\n    // Modify the properties of the second driver.\n    driver2.location = 'London';\n    // Update the drivers in the driver participant registry.\n    return participantRegistry.updateAll([driver1, driver2]);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#updateAll"},{"title":"param","description":"The participants to update in this participant registry.","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]},"name":"participants"},{"title":"return","description":"A promise. The promise is resolved when all of the\nparticipants have been updated in this participant registry. If the participants cannot be\nupdated in this participant registry, or if the participants do not exist in the\nparticipant registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Update all of the specified participants in this participant registry."],"parameters":[{"description":"The participants to update in this participant registry.","name":"participants","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when all of the participants have been updated in this participant registry. If the participants cannot be updated in this participant registry, or if the participants do not exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Update all of the specified participants in this participant registry"},{"visibility":"+","returnType":"Promise","name":"update","parameterTypes":["Resource"],"parameterNames":["participant"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function update(participant) {\n            return registry.update(participant, { convertResourcesToRelationships: true });\n        }","example":"// The existing driver that has come from elsewhere.\nvar driver;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Modify the properties of the driver.\n    driver.location = 'Hursley';\n    // Update the driver in the driver participant registry.\n    return participantRegistry.update(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Update the specified participant in this participant registry.","tags":[{"title":"example","description":"// The existing driver that has come from elsewhere.\nvar driver;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Modify the properties of the driver.\n    driver.location = 'Hursley';\n    // Update the driver in the driver participant registry.\n    return participantRegistry.update(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#update"},{"title":"param","description":"The participant to update in this participant registry.","type":{"type":"NameExpression","name":"Resource"},"name":"participant"},{"title":"return","description":"A promise. The promise is resolved when the participant\nhave been updated in this participant registry. If the participant cannot be\nupdated in this participant registry, or if the participant does not exist in the\nparticipant registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Update the specified participant in this participant registry."],"parameters":[{"description":"The participant to update in this participant registry.","type":"Resource","name":"participant","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when the participant have been updated in this participant registry. If the participant cannot be updated in this participant registry, or if the participant does not exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Update the specified participant in this participant registry"},{"visibility":"+","returnType":"Promise","name":"removeAll","parameterTypes":[],"parameterNames":["participants"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function removeAll(participants) {\n            return registry.removeAll(participants);\n        }","example":"// The existing drivers that have come from elsewhere.\nvar driver1;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Remove the drivers from the driver participant registry. Note that\n    // one driver is specified as a driver instance, and the other\n    // driver is specified by the ID of the driver.\n    return participantRegistry.removeAll([driver1, 'VEHICLE_2']);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Remove all of the specified participants from this participant registry.","tags":[{"title":"example","description":"// The existing drivers that have come from elsewhere.\nvar driver1;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Remove the drivers from the driver participant registry. Note that\n    // one driver is specified as a driver instance, and the other\n    // driver is specified by the ID of the driver.\n    return participantRegistry.removeAll([driver1, 'VEHICLE_2']);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#removeAll"},{"title":"param","description":"The participants, or the IDs of the participants,\nto remove from this participant registry.","type":{"type":"UnionType","elements":[{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]},{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Resource"}]}]},"name":"participants"},{"title":"return","description":"A promise. The promise is resolved when all of the\nparticipants have been removed from this participant registry. If the participants cannot be\nremoved from this participant registry, or if the participants do not exist in the\nparticipant registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Remove all of the specified participants from this participant registry."],"parameters":[{"description":"The participants, or the IDs of the participants, to remove from this participant registry.","name":"participants","type":"; ","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when all of the participants have been removed from this participant registry. If the participants cannot be removed from this participant registry, or if the participants do not exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Remove all of the specified participants from this participant registry"},{"visibility":"+","returnType":"Promise","name":"remove","parameterTypes":[],"parameterNames":["participant"],"throws":"","decorators":["example","public","method","param","return"],"functionText":"function remove(participant) {\n            return registry.remove(participant);\n        }","example":"// The existing driver that has come from elsewhere.\nvar driver;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Remove the driver from the driver participant registry.\n    return participantRegistry.remove(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });","commentData":{"description":"Remove the specified participant from this participant registry.","tags":[{"title":"example","description":"// The existing driver that has come from elsewhere.\nvar driver;\n// Get the driver participant registry.\nreturn getParticipantRegistry('org.acme.Driver')\n  .then(function (participantRegistry) {\n    // Get the factory for creating new participant instances.\n    var factory = getFactory();\n    // Remove the driver from the driver participant registry.\n    return participantRegistry.remove(driver);\n  })\n  .catch(function (error) {\n    // Add optional error handling here.\n  });"},{"title":"public","description":null,"type":null},{"title":"method","description":null,"name":"module:composer-runtime.ParticipantRegistry#remove"},{"title":"param","description":"The participant, or ID of the participant, to remove\nfrom this participant registry.","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"Resource"}]},"name":"participant"},{"title":"return","description":"A promise. The promise is resolved when the participant\nhas been removed from this participant registry. If the participant cannot be\nremoved from this participant registry, or if the participant does not exist in the\nparticipant registry, then the promise will be rejected with an error that\ndescribes the problem.","type":{"type":"NameExpression","name":"Promise"}}]},"description":["Remove the specified participant from this participant registry."],"parameters":[{"description":"The participant, or ID of the participant, to remove from this participant registry.","name":"participant","type":"string; Resource","optional":false}],"suboptions":[],"seeAlso":[],"return":{"description":["A promise. The promise is resolved when the participant has been removed from this participant registry. If the participant cannot be removed from this participant registry, or if the participant does not exist in the participant registry, then the promise will be rejected with an error that describes the problem."],"type":"Promise"},"summary":"Remove the specified participant from this participant registry"}],"description":["The ParticipantRegistry is used to manage a set of participants stored on the blockchain.","Do not attempt to create an instance of this class. You must use the {@link runtime-api#getParticipantRegistry getParticipantRegistry} method instead."],"seeAlso":[],"visibility":"public","module":"runtime","summary":"The ParticipantRegistry is used to manage a set of participants stored on the blockchain"}