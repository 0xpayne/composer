namespace systest.transactions

enum SimpleEnum {
    o WOW
    o SUCH
    o MANY
    o MUCH
}

asset SimpleStringAsset identified by assetId {
    o String assetId
    o String stringValue
}

asset SimpleIntegerAsset identified by assetId {
    o String assetId
    o Integer integerValue
}

asset SimpleRelationshipAsset identified by assetId {
    o String assetId
    --> SimpleStringAsset stringAsset
}

asset SimpleRelationshipsAsset identified by assetId {
    o String assetId
    --> SimpleStringAsset[] stringAssets
}

transaction SimpleTransactionWithPrimitiveTypes identified by transactionId {
    o String transactionId
    o String stringValue
    o Double doubleValue
    o Integer integerValue
    o Long longValue
    o DateTime dateTimeValue
    o Boolean booleanValue
    o SimpleEnum enumValue
}

function onSimpleTransactionWithPrimitiveTypes(transaction) {
    console.log(JSON.stringify(transaction));
    var assertEqual = function (property, actual, expected) {
        if (typeof actual !== typeof expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') types not equal');
        } else if (actual instanceof Date) {
            if (actual.getTime() !== expected.getTime()) {
                throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
            }
        } else if (actual !== expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
        }
    }
    assertEqual('stringValue', transaction.stringValue, 'what a transaction');
    assertEqual('doubleValue', transaction.doubleValue, 3.142);
    assertEqual('integerValue', transaction.integerValue, 2000000000);
    assertEqual('longValue', transaction.longValue, 16000000000000);
    assertEqual('dateTimeValue', transaction.dateTimeValue, new Date('2016-10-14T18:30:30+00:00'));
    assertEqual('booleanValue', transaction.booleanValue, true);
    assertEqual('enumValue', transaction.enumValue, 'SUCH');
}

transaction SimpleTransactionWithPrimitiveTypeArrays identified by transactionId {
    o String transactionId
    o String[] stringValues
    o Double[] doubleValues
    o Integer[] integerValues
    o Long[] longValues
    o DateTime[] dateTimeValues
    o Boolean[] booleanValues
    o SimpleEnum[] enumValues
}

function onSimpleTransactionWithPrimitiveTypeArrays(transaction) {
    console.log(JSON.stringify(transaction));
    var assertArraysEqual = function (property, actuals, expecteds) {
        if (actuals.length !== expecteds.length) {
            throw new Error('assertArraysEqual(' + property + ', ' + actuals + ', ' + expecteds + ') lengths not equal');
        }
        for (var i = 0; i < actuals.length; i++) {
            var actual = actuals[i];
            var expected = expecteds[i];
            if (typeof actual !== typeof expected) {
                throw new Error('assertArraysEqual(' + property + ', ' + actuals + ', ' + expecteds + ') types not equal');
            } else if (actual instanceof Date) {
                if (actual.getTime() !== expected.getTime()) {
                    throw new Error('assertArraysEqual(' + property + ', ' + actuals + ', ' + expecteds + ') values not equal');
                }
            } else if (actual !== expected) {
                throw new Error('assertArraysEqual(' + property + ', ' + actuals + ', ' + expecteds + ') values not equal');
            }
        }
    }
    assertArraysEqual('stringValues', transaction.stringValues, ['what a transaction', 'hail the party parrot']);
    assertArraysEqual('doubleValues', transaction.doubleValues, [3.142, 6.666]);
    assertArraysEqual('integerValues', transaction.integerValues, [2000000000, 16384]);
    assertArraysEqual('longValues', transaction.longValues, [16000000000000, 32000000]);
    assertArraysEqual('dateTimeValues', transaction.dateTimeValues, [new Date('2016-10-14T18:30:30+00:00'), new Date('1066-10-14T18:30:30+00:00')]);
    assertArraysEqual('booleanValues', transaction.booleanValues, [true, false]);
    assertArraysEqual('enumValues', transaction.enumValues, ['SUCH', 'MANY']);
}

transaction SimpleTransactionWithAssets identified by transactionId {
    o String transactionId
    o SimpleStringAsset stringAsset
    o SimpleIntegerAsset integerAsset
}

function onSimpleTransactionWithAssets(transaction) {
    console.log(JSON.stringify(transaction));
    var assertEqual = function (property, actual, expected) {
        if (typeof actual !== typeof expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') types not equal');
        } else if (actual instanceof Date) {
            if (actual.getTime() !== expected.getTime()) {
                throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
            }
        } else if (actual !== expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
        }
    }
    assertEqual('stringAsset.assetId', transaction.stringAsset.assetId, 'stringAsset1');
    assertEqual('stringAsset.stringValue', transaction.stringAsset.stringValue, 'party parrot in hursley');
    assertEqual('integerAsset.assetId', transaction.integerAsset.assetId, 'integerAsset1');
    assertEqual('integerAsset.integerValue', transaction.integerAsset.integerValue, 5318008);
}

transaction SimpleTransactionWithAssetArrays identified by transactionId {
    o String transactionId
    o SimpleStringAsset[] stringAssets
    o SimpleIntegerAsset[] integerAssets
}

function onSimpleTransactionWithAssetArrays(transaction) {
    console.log(JSON.stringify(transaction));
    var assertEqual = function (property, actual, expected) {
        if (typeof actual !== typeof expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') types not equal');
        } else if (actual instanceof Date) {
            if (actual.getTime() !== expected.getTime()) {
                throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
            }
        } else if (actual !== expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
        }
    }
    assertEqual('stringAssets.length', transaction.stringAssets.length, 2);
    assertEqual('stringAssets[0].assetId', transaction.stringAssets[0].assetId, 'stringAsset1');
    assertEqual('stringAssets[0].stringValue', transaction.stringAssets[0].stringValue, 'party parrot in hursley');
    assertEqual('stringAssets[1].assetId', transaction.stringAssets[1].assetId, 'stringAsset2');
    assertEqual('stringAssets[1].stringValue', transaction.stringAssets[1].stringValue, 'party parrot in san francisco');
    assertEqual('integerAssets.length', transaction.stringAssets.length, 2);
    assertEqual('integerAssets[0].assetId', transaction.integerAssets[0].assetId, 'integerAsset1');
    assertEqual('integerAssets[0].integerValue', transaction.integerAssets[0].integerValue, 5318008);
    assertEqual('integerAssets[1].assetId', transaction.integerAssets[1].assetId, 'integerAsset2');
    assertEqual('integerAssets[1].integerValue', transaction.integerAssets[1].integerValue, 56373351);
}

transaction SimpleTransactionWithAssetRelationships identified by transactionId {
    o String transactionId
    --> SimpleStringAsset stringAsset
    --> SimpleIntegerAsset integerAsset
}

function onSimpleTransactionWithAssetRelationships(transaction) {
    console.log(JSON.stringify(transaction));
    var assertEqual = function (property, actual, expected) {
        if (typeof actual !== typeof expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') types not equal');
        } else if (actual instanceof Date) {
            if (actual.getTime() !== expected.getTime()) {
                throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
            }
        } else if (actual !== expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
        }
    }
    assertEqual('stringAsset.assetId', transaction.stringAsset.assetId, 'stringAsset1');
    assertEqual('stringAsset.stringValue', transaction.stringAsset.stringValue, 'party parrot in hursley');
    assertEqual('integerAsset.assetId', transaction.integerAsset.assetId, 'integerAsset1');
    assertEqual('integerAsset.integerValue', transaction.integerAsset.integerValue, 5318008);
}

transaction SimpleTransactionWithAssetRelationshipArrays identified by transactionId {
    o String transactionId
    --> SimpleStringAsset[] stringAssets
    --> SimpleIntegerAsset[] integerAssets
}

function onSimpleTransactionWithAssetRelationshipArrays(transaction) {
    console.log(JSON.stringify(transaction));
    var assertEqual = function (property, actual, expected) {
        if (typeof actual !== typeof expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') types not equal');
        } else if (actual instanceof Date) {
            if (actual.getTime() !== expected.getTime()) {
                throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
            }
        } else if (actual !== expected) {
            throw new Error('assertEqual(' + property + ', ' + actual + ', ' + expected + ') values not equal');
        }
    }
    assertEqual('stringAssets.length', transaction.stringAssets.length, 2);
    assertEqual('stringAssets[0].assetId', transaction.stringAssets[0].assetId, 'stringAsset1');
    assertEqual('stringAssets[0].stringValue', transaction.stringAssets[0].stringValue, 'party parrot in hursley');
    assertEqual('stringAssets[1].assetId', transaction.stringAssets[1].assetId, 'stringAsset2');
    assertEqual('stringAssets[1].stringValue', transaction.stringAssets[1].stringValue, 'party parrot in san francisco');
    assertEqual('integerAssets.length', transaction.stringAssets.length, 2);
    assertEqual('integerAssets[0].assetId', transaction.integerAssets[0].assetId, 'integerAsset1');
    assertEqual('integerAssets[0].integerValue', transaction.integerAssets[0].integerValue, 5318008);
    assertEqual('integerAssets[1].assetId', transaction.integerAssets[1].assetId, 'integerAsset2');
    assertEqual('integerAssets[1].integerValue', transaction.integerAssets[1].integerValue, 56373351);
}

transaction GetAllAssetsFromAssetRegistryTransaction identified by transactionId {
    o String transactionId
}

function onGetAllAssetsFromAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleStringAsset');
    var as = ar.getAll().sort(function (a, b) {
        return a.assetId.localeCompare(b.assetId);
    });
    console.log(JSON.stringify(as));
    if (as.length !== 2) { throw new Error('length does not match'); }
    if (typeof as[0] !== 'object') { throw new Error('first asset is not an object'); }
    if (typeof as[1] !== 'object') { throw new Error('second asset is not an object'); }
    if (as[0].assetId !== 'stringAsset1') { throw new Error('first asset has invalid value'); }
    if (as[0].stringValue !== 'party parrot in hursley') { throw new Error('first asset has invalid value'); }
    if (as[1].assetId !== 'stringAsset2') { throw new Error('second asset has invalid value'); }
    if (as[1].stringValue !== 'party parrot in san francisco') { throw new Error('second asset has invalid value'); }
}

transaction GetAssetFromAssetRegistryTransaction identified by transactionId {
    o String transactionId
}

function onGetAssetFromAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleStringAsset');
	var a = ar.get('stringAsset1');
    console.log(JSON.stringify(a));
    if (typeof a !== 'object') { throw new Error('asset is not an object'); }
    if (a.assetId !== 'stringAsset1') { throw new Error('asset has invalid value'); }
    if (a.stringValue !== 'party parrot in hursley') { throw new Error('asset has invalid value'); }
}

transaction AddAssetInTransactionToAssetRegistryTransaction identified by transactionId {
    o String transactionId
    o SimpleStringAsset stringAsset
}

function onAddAssetInTransactionToAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleStringAsset');
    ar.add(transaction.stringAsset);
}

transaction AddAssetWithRelationshipInTransactionToAssetRegistryTransaction identified by transactionId {
    o String transactionId
    o SimpleRelationshipAsset relationshipAsset
}

function onAddAssetWithRelationshipInTransactionToAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleRelationshipAsset');
    ar.add(transaction.relationshipAsset);
}

transaction AddNewAssetToAssetRegistryTransaction identified by transactionId {
    o String transactionId
}

function onAddNewAssetToAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleStringAsset');
    var f = getFactory();
    var a = f.newInstance('systest.transactions', 'SimpleStringAsset', 'stringAsset1');
    a.stringValue = 'party parrot in hursley';
    ar.add(a);
}

transaction AddNewAssetWithRelationshipToAssetRegistryTransaction identified by transactionId {
    o String transactionId
}

function onAddNewAssetWithRelationshipToAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleRelationshipAsset');
    var f = getFactory();
    var a = f.newInstance('systest.transactions', 'SimpleRelationshipAsset', 'relationshipAsset1');
    a.stringAsset = f.newRelationship('systest.transactions', 'SimpleStringAsset', 'stringAsset1');
    ar.add(a);
}

transaction UpdateAssetInTransactionInAssetRegistryTransaction identified by transactionId {
    o String transactionId
    o SimpleStringAsset stringAsset
}

function onUpdateAssetInTransactionInAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleStringAsset');
    ar.update(transaction.stringAsset);
}

transaction UpdateAssetWithRelationshipInTransactionInAssetRegistryTransaction identified by transactionId {
    o String transactionId
    o SimpleRelationshipAsset relationshipAsset
}

function onUpdateAssetWithRelationshipInTransactionInAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleRelationshipAsset');
    ar.update(transaction.relationshipAsset);
}

transaction UpdateNewAssetInAssetRegistryTransaction identified by transactionId {
    o String transactionId
}

function onUpdateNewAssetInAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleStringAsset');
    var f = getFactory();
    var a = f.newInstance('systest.transactions', 'SimpleStringAsset', 'stringAsset1');
    a.stringValue = 'party parrot in san francisco';
    ar.update(a);
}

transaction UpdateNewAssetWithRelationshipToAssetRegistryTransaction identified by transactionId {
    o String transactionId
}

function onUpdateNewAssetWithRelationshipToAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleRelationshipAsset');
    var f = getFactory();
    var a = f.newInstance('systest.transactions', 'SimpleRelationshipAsset', 'relationshipAsset1');
    a.stringAsset = f.newRelationship('systest.transactions', 'SimpleStringAsset', 'stringAsset2');
    ar.update(a);
}

transaction RemoveAssetInTransactionInAssetRegistryTransaction identified by transactionId {
    o String transactionId
    o SimpleStringAsset stringAsset
}

function onRemoveAssetInTransactionInAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleStringAsset');
    ar.remove(transaction.stringAsset);
}

transaction RemoveAssetWithRelationshipInTransactionInAssetRegistryTransaction identified by transactionId {
    o String transactionId
    o SimpleRelationshipAsset relationshipAsset
}

function onRemoveAssetWithRelationshipInTransactionInAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleRelationshipAsset');
    ar.remove(transaction.relationshipAsset);
}

transaction RemoveNewAssetInAssetRegistryTransaction identified by transactionId {
    o String transactionId
}

function onRemoveNewAssetInAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleStringAsset');
    var f = getFactory();
    var a = f.newInstance('systest.transactions', 'SimpleStringAsset', 'stringAsset1');
    a.stringValue = 'party parrot in san francisco';
    ar.remove(a);
}

transaction RemoveNewAssetWithRelationshipInAssetRegistryTransaction identified by transactionId {
    o String transactionId
}

function onRemoveNewAssetWithRelationshipInAssetRegistryTransaction(transaction) {
    console.log(JSON.stringify(transaction));
    var ar = getAssetRegistry('systest.transactions.SimpleRelationshipAsset');
    var f = getFactory();
    var a = f.newInstance('systest.transactions', 'SimpleRelationshipAsset', 'relationshipAsset1');
    a.stringAsset = f.newRelationship('systest.transactions', 'SimpleStringAsset', 'stringAsset1');
    ar.remove(a);
}
