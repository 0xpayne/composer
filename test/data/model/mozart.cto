/**
 * Mozart Domain Model and Business Logic
 *
 * Defines an Animal Movement compliance model.
 * Based on DEFRA https://www.gov.uk/animal-movement-england
 *
 * Concerto Language File
 */
namespace com.ibm.concerto.mozart

/**
 * The types of animals that could be moved
 */
enum AnimalType {
  o SHEEP_GOAT
  o CATTLE
  o PIG
  o DEER_OTHER
}

/**
 * The movement status for an animal
 */
enum MovementStatus {
  o IN_FIELD
  o IN_TRANSIT
}



/**
 * The production type associated with an animal
 */
enum ProductionType {
  o MEAT
  o WOOL
  o DAIRY
  o BREEDING
  o OTHER
}

/**
 * A Farmer participant
 */
participant Farmer identified by farmerId {
    o String farmerId
    o String firstName
    o String lastName
    o String address1
    o String address2
    o String county
    o String postcode
}

/**
 * A Field asset. A Field is related to a list of animals
 */
asset Field identified by cph {
  o String cph
  o String name
  --> Business business
}

/**
 * An Animal asset, which is related to a Field
 */
asset Animal identified by animalId {
    o String animalId
    o AnimalType species
    o MovementStatus movementStatus
    o ProductionType productionType
    --> Field location
}

/**
 * A Business asset which is owned by a Farmer, is related to a list of fields
 * and has a list of incoming animals.
 */
asset Business identified by sbi {
     o String sbi
     o String address1
     o String address2
     o String county
     o String postcode
     --> Farmer owner
     --> Animal[] incomingAnimals optional
}

/**
 * An abstract transaction type for animal movements
 */
abstract transaction AnimalMovement identified by transactionId {
  o String transactionId
    --> Animal animal
    --> Business from
    --> Business to
}

/**
 * A transaction type for an animal leaving a farm
 */
transaction AnimalMovementDeparture extends AnimalMovement {
}

/**
 * A transaction type for an animal arriving at a field
 */
transaction AnimalMovementArrival extends AnimalMovement {
  --> Field location
}

/**
 * A transaction processor for AnimalMovementDeparture
 */
/*
 function onAnimalMovementDeparture(json) {

   // test calling a native Go function
   log( 'onAnimalMovementDeparture: ' + json );

   // convert the JSON to a JS object
   movementDeparture = JSON.parse(json);

   // mark the animal as IN_TRANSIT
   if(movementDeparture.animal.movementStatus === 'IN_FIELD') {
     log('Animal is in field');

     // mark the animal as IN_TRANSIT
     movementDeparture.animal.movementStatus = 'IN_TRANSIT';

     // add the animal to the list of incoming animals for the destination field
     // TODO (DCS) -- handle duplicates!
     movementDeparture.to.incoming.push(movementDeparture.animal);

     // remove the animal from its current field
     // TODO (DCS) too ugly!
     movementDeparture.animal.location =
       movementDeparture.animal.location.animals.filter
         (function(animal) { return animal.id !== movementDeparture.animal.id; });

     // clear the animal's location
     movementDeparture.animal.location = null;

     // return the transaction as a string
     return JSON.stringify(movementDeparture);
   }
   else {
     throw new Error('Cannot move an animal that is not IN_FIELD');
   }
 }
 */

/**
 * A transaction processor for AnimalMovementArrival
 */
/*
function onAnimalMovementArrival(movementArrival) {
  // mark the animal as IN_FIELD
  movementArrival.animal.movementStatus = MovementStatus.IN_FIELD;

  // remove the animal from the 'to' Holder's incoming set
  movementArrival.to.incoming.remove(animalMovement.animal);

  // add the animal to a field
  movementArrival.location.add(movementArrival.animal);

  // set the new animal location
  movementArrival.animal.location = movementArrival.location;
}
*/
